Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> seq
Rule 1     seq -> statement
Rule 2     seq -> seq statement
Rule 3     statement -> declare
Rule 4     statement -> assign
Rule 5     declare -> TYPE NAME
Rule 6     declare -> TYPE assign
Rule 7     assign -> NAME ASSIGN expression
Rule 8     expression -> expression PLUS expression
Rule 9     expression -> expression MINUS expression
Rule 10    expression -> expression TIMES expression
Rule 11    expression -> expression DIVIDE expression
Rule 12    expression -> LPAREN expression RPAREN
Rule 13    expression -> NAME
Rule 14    expression -> NUMBER
Rule 15    expression -> unary
Rule 16    unary -> MINUS NAME
Rule 17    unary -> MINUS NUMBER

Terminals, with rules where they appear

ASSIGN               : 7
DIVIDE               : 11
LPAREN               : 12
MINUS                : 9 16 17
NAME                 : 5 7 13 16
NUMBER               : 14 17
PLUS                 : 8
RPAREN               : 12
TIMES                : 10
TYPE                 : 5 6
error                : 

Nonterminals, with rules where they appear

assign               : 4 6
declare              : 3
expression           : 7 8 8 9 9 10 10 11 11 12
seq                  : 2 0
statement            : 1 2
unary                : 15

Parsing method: LALR

state 0

    (0) S' -> . seq
    (1) seq -> . statement
    (2) seq -> . seq statement
    (3) statement -> . declare
    (4) statement -> . assign
    (5) declare -> . TYPE NAME
    (6) declare -> . TYPE assign
    (7) assign -> . NAME ASSIGN expression

    TYPE            shift and go to state 5
    NAME            shift and go to state 6

    seq                            shift and go to state 1
    statement                      shift and go to state 2
    declare                        shift and go to state 3
    assign                         shift and go to state 4

state 1

    (0) S' -> seq .
    (2) seq -> seq . statement
    (3) statement -> . declare
    (4) statement -> . assign
    (5) declare -> . TYPE NAME
    (6) declare -> . TYPE assign
    (7) assign -> . NAME ASSIGN expression

    TYPE            shift and go to state 5
    NAME            shift and go to state 6

    statement                      shift and go to state 7
    declare                        shift and go to state 3
    assign                         shift and go to state 4

state 2

    (1) seq -> statement .

    TYPE            reduce using rule 1 (seq -> statement .)
    NAME            reduce using rule 1 (seq -> statement .)
    $end            reduce using rule 1 (seq -> statement .)


state 3

    (3) statement -> declare .

    TYPE            reduce using rule 3 (statement -> declare .)
    NAME            reduce using rule 3 (statement -> declare .)
    $end            reduce using rule 3 (statement -> declare .)


state 4

    (4) statement -> assign .

    TYPE            reduce using rule 4 (statement -> assign .)
    NAME            reduce using rule 4 (statement -> assign .)
    $end            reduce using rule 4 (statement -> assign .)


state 5

    (5) declare -> TYPE . NAME
    (6) declare -> TYPE . assign
    (7) assign -> . NAME ASSIGN expression

    NAME            shift and go to state 8

    assign                         shift and go to state 9

state 6

    (7) assign -> NAME . ASSIGN expression

    ASSIGN          shift and go to state 10


state 7

    (2) seq -> seq statement .

    TYPE            reduce using rule 2 (seq -> seq statement .)
    NAME            reduce using rule 2 (seq -> seq statement .)
    $end            reduce using rule 2 (seq -> seq statement .)


state 8

    (5) declare -> TYPE NAME .
    (7) assign -> NAME . ASSIGN expression

    TYPE            reduce using rule 5 (declare -> TYPE NAME .)
    NAME            reduce using rule 5 (declare -> TYPE NAME .)
    $end            reduce using rule 5 (declare -> TYPE NAME .)
    ASSIGN          shift and go to state 10


state 9

    (6) declare -> TYPE assign .

    TYPE            reduce using rule 6 (declare -> TYPE assign .)
    NAME            reduce using rule 6 (declare -> TYPE assign .)
    $end            reduce using rule 6 (declare -> TYPE assign .)


state 10

    (7) assign -> NAME ASSIGN . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 12
    unary                          shift and go to state 16

state 11

    (13) expression -> NAME .

    PLUS            reduce using rule 13 (expression -> NAME .)
    MINUS           reduce using rule 13 (expression -> NAME .)
    TIMES           reduce using rule 13 (expression -> NAME .)
    DIVIDE          reduce using rule 13 (expression -> NAME .)
    TYPE            reduce using rule 13 (expression -> NAME .)
    NAME            reduce using rule 13 (expression -> NAME .)
    $end            reduce using rule 13 (expression -> NAME .)
    RPAREN          reduce using rule 13 (expression -> NAME .)


state 12

    (7) assign -> NAME ASSIGN expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    TYPE            reduce using rule 7 (assign -> NAME ASSIGN expression .)
    NAME            reduce using rule 7 (assign -> NAME ASSIGN expression .)
    $end            reduce using rule 7 (assign -> NAME ASSIGN expression .)
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 13

    (16) unary -> MINUS . NAME
    (17) unary -> MINUS . NUMBER

    NAME            shift and go to state 21
    NUMBER          shift and go to state 22


state 14

    (12) expression -> LPAREN . expression RPAREN
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 23
    unary                          shift and go to state 16

state 15

    (14) expression -> NUMBER .

    PLUS            reduce using rule 14 (expression -> NUMBER .)
    MINUS           reduce using rule 14 (expression -> NUMBER .)
    TIMES           reduce using rule 14 (expression -> NUMBER .)
    DIVIDE          reduce using rule 14 (expression -> NUMBER .)
    TYPE            reduce using rule 14 (expression -> NUMBER .)
    NAME            reduce using rule 14 (expression -> NUMBER .)
    $end            reduce using rule 14 (expression -> NUMBER .)
    RPAREN          reduce using rule 14 (expression -> NUMBER .)


state 16

    (15) expression -> unary .

    PLUS            reduce using rule 15 (expression -> unary .)
    MINUS           reduce using rule 15 (expression -> unary .)
    TIMES           reduce using rule 15 (expression -> unary .)
    DIVIDE          reduce using rule 15 (expression -> unary .)
    TYPE            reduce using rule 15 (expression -> unary .)
    NAME            reduce using rule 15 (expression -> unary .)
    $end            reduce using rule 15 (expression -> unary .)
    RPAREN          reduce using rule 15 (expression -> unary .)


state 17

    (8) expression -> expression PLUS . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 24
    unary                          shift and go to state 16

state 18

    (9) expression -> expression MINUS . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 25
    unary                          shift and go to state 16

state 19

    (10) expression -> expression TIMES . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 26
    unary                          shift and go to state 16

state 20

    (11) expression -> expression DIVIDE . expression
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression TIMES expression
    (11) expression -> . expression DIVIDE expression
    (12) expression -> . LPAREN expression RPAREN
    (13) expression -> . NAME
    (14) expression -> . NUMBER
    (15) expression -> . unary
    (16) unary -> . MINUS NAME
    (17) unary -> . MINUS NUMBER

    LPAREN          shift and go to state 14
    NAME            shift and go to state 11
    NUMBER          shift and go to state 15
    MINUS           shift and go to state 13

    expression                     shift and go to state 27
    unary                          shift and go to state 16

state 21

    (16) unary -> MINUS NAME .

    PLUS            reduce using rule 16 (unary -> MINUS NAME .)
    MINUS           reduce using rule 16 (unary -> MINUS NAME .)
    TIMES           reduce using rule 16 (unary -> MINUS NAME .)
    DIVIDE          reduce using rule 16 (unary -> MINUS NAME .)
    TYPE            reduce using rule 16 (unary -> MINUS NAME .)
    NAME            reduce using rule 16 (unary -> MINUS NAME .)
    $end            reduce using rule 16 (unary -> MINUS NAME .)
    RPAREN          reduce using rule 16 (unary -> MINUS NAME .)


state 22

    (17) unary -> MINUS NUMBER .

    PLUS            reduce using rule 17 (unary -> MINUS NUMBER .)
    MINUS           reduce using rule 17 (unary -> MINUS NUMBER .)
    TIMES           reduce using rule 17 (unary -> MINUS NUMBER .)
    DIVIDE          reduce using rule 17 (unary -> MINUS NUMBER .)
    TYPE            reduce using rule 17 (unary -> MINUS NUMBER .)
    NAME            reduce using rule 17 (unary -> MINUS NUMBER .)
    $end            reduce using rule 17 (unary -> MINUS NUMBER .)
    RPAREN          reduce using rule 17 (unary -> MINUS NUMBER .)


state 23

    (12) expression -> LPAREN expression . RPAREN
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 28
    PLUS            shift and go to state 17
    MINUS           shift and go to state 18
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20


state 24

    (8) expression -> expression PLUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 8 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 8 (expression -> expression PLUS expression .)
    NAME            reduce using rule 8 (expression -> expression PLUS expression .)
    $end            reduce using rule 8 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 8 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20

  ! TIMES           [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 25

    (9) expression -> expression MINUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 9 (expression -> expression MINUS expression .)
    NAME            reduce using rule 9 (expression -> expression MINUS expression .)
    $end            reduce using rule 9 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 9 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 20

  ! TIMES           [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]


state 26

    (10) expression -> expression TIMES expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 10 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 10 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 10 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 10 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 10 (expression -> expression TIMES expression .)
    NAME            reduce using rule 10 (expression -> expression TIMES expression .)
    $end            reduce using rule 10 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 10 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]


state 27

    (11) expression -> expression DIVIDE expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . TIMES expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 11 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 11 (expression -> expression DIVIDE expression .)
    NAME            reduce using rule 11 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 11 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 17 ]
  ! MINUS           [ shift and go to state 18 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]


state 28

    (12) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    NAME            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 12 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 12 (expression -> LPAREN expression RPAREN .)

