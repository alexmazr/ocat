Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     empty -> <empty>
Rule 3     statements -> statement
Rule 4     statements -> statements statement
Rule 5     statements -> empty
Rule 6     statement -> declaration
Rule 7     statement -> assignment
Rule 8     statement -> call
Rule 9     statement -> for
Rule 10    statement -> if
Rule 11    declaration -> TYPE assignment
Rule 12    declaration -> MUT TYPE NAME NEWLINE
Rule 13    declaration -> MUT TYPE assignment
Rule 14    assignment -> NAME ASSIGN expression NEWLINE
Rule 15    assignment -> NAME ASSIGN call NEWLINE
Rule 16    call -> FUNCNAME LPAREN arguments RPAREN NEWLINE
Rule 17    for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
Rule 18    if -> IF expression THEN statements END IF NEWLINE
Rule 19    if -> IF expression THEN statements ELSE statements END IF NEWLINE
Rule 20    arguments -> expression
Rule 21    arguments -> arguments COMMA expression
Rule 22    arguments -> empty
Rule 23    expression -> expression IF expression ELSE expression
Rule 24    expression -> expression LSHIFT expression
Rule 25    expression -> expression RSHIFT expression
Rule 26    expression -> expression BITAND expression
Rule 27    expression -> expression BITXOR expression
Rule 28    expression -> expression BITOR expression
Rule 29    expression -> expression EXP expression
Rule 30    expression -> expression MOD expression
Rule 31    expression -> expression ADD expression
Rule 32    expression -> expression SUB expression
Rule 33    expression -> expression MUL expression
Rule 34    expression -> expression DIV expression
Rule 35    expression -> expression AND expression
Rule 36    expression -> expression XOR expression
Rule 37    expression -> expression NEQ expression
Rule 38    expression -> expression GTE expression
Rule 39    expression -> expression LTE expression
Rule 40    expression -> expression EQ expression
Rule 41    expression -> expression LT expression
Rule 42    expression -> expression GT expression
Rule 43    expression -> expression OR expression
Rule 44    expression -> LPAREN expression RPAREN
Rule 45    expression -> SUB expression
Rule 46    expression -> INV expression
Rule 47    expression -> NOT expression
Rule 48    expression -> NAME DOT NAME
Rule 49    expression -> NAME
Rule 50    expression -> INT
Rule 51    expression -> FLOAT
Rule 52    expression -> SCI
Rule 53    expression -> BOOL

Terminals, with rules where they appear

ADD                  : 31
AND                  : 35
ASSIGN               : 14 15
BITAND               : 26
BITOR                : 28
BITXOR               : 27
BOOL                 : 53
COMMA                : 21
DIV                  : 34
DOT                  : 48
ELSE                 : 19 23
END                  : 17 18 19
EQ                   : 40
EXP                  : 29
FLOAT                : 51
FOR                  : 17
FUNCNAME             : 16
GT                   : 42
GTE                  : 38
IF                   : 18 18 19 19 23
IN                   : 17
INT                  : 50
INV                  : 46
LOOP                 : 17 17
LPAREN               : 16 17 44
LSHIFT               : 24
LT                   : 41
LTE                  : 39
MOD                  : 30
MUL                  : 33
MUT                  : 12 13
NAME                 : 12 14 15 17 48 48 49
NEQ                  : 37
NEWLINE              : 12 14 15 16 17 18 19
NOT                  : 47
OR                   : 43
RPAREN               : 16 17 44
RSHIFT               : 25
SCI                  : 52
SUB                  : 32 45
THEN                 : 18 19
TYPE                 : 11 12 13
XOR                  : 36
error                : 

Nonterminals, with rules where they appear

arguments            : 16 17 21
assignment           : 7 11 13
call                 : 8 15
declaration          : 6
empty                : 5 22
expression           : 14 18 19 20 21 23 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 45 46 47
for                  : 9
if                   : 10
program              : 0
statement            : 3 4
statements           : 1 4 17 18 19 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (2) empty -> .
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

    $end            reduce using rule 1 (program -> statements .)
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 16
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 3

    (3) statements -> statement .

    TYPE            reduce using rule 3 (statements -> statement .)
    MUT             reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    FUNCNAME        reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)


state 4

    (5) statements -> empty .

    TYPE            reduce using rule 5 (statements -> empty .)
    MUT             reduce using rule 5 (statements -> empty .)
    NAME            reduce using rule 5 (statements -> empty .)
    FUNCNAME        reduce using rule 5 (statements -> empty .)
    FOR             reduce using rule 5 (statements -> empty .)
    IF              reduce using rule 5 (statements -> empty .)
    $end            reduce using rule 5 (statements -> empty .)
    END             reduce using rule 5 (statements -> empty .)
    ELSE            reduce using rule 5 (statements -> empty .)


state 5

    (6) statement -> declaration .

    TYPE            reduce using rule 6 (statement -> declaration .)
    MUT             reduce using rule 6 (statement -> declaration .)
    NAME            reduce using rule 6 (statement -> declaration .)
    FUNCNAME        reduce using rule 6 (statement -> declaration .)
    FOR             reduce using rule 6 (statement -> declaration .)
    IF              reduce using rule 6 (statement -> declaration .)
    $end            reduce using rule 6 (statement -> declaration .)
    END             reduce using rule 6 (statement -> declaration .)
    ELSE            reduce using rule 6 (statement -> declaration .)


state 6

    (7) statement -> assignment .

    TYPE            reduce using rule 7 (statement -> assignment .)
    MUT             reduce using rule 7 (statement -> assignment .)
    NAME            reduce using rule 7 (statement -> assignment .)
    FUNCNAME        reduce using rule 7 (statement -> assignment .)
    FOR             reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    END             reduce using rule 7 (statement -> assignment .)
    ELSE            reduce using rule 7 (statement -> assignment .)


state 7

    (8) statement -> call .

    TYPE            reduce using rule 8 (statement -> call .)
    MUT             reduce using rule 8 (statement -> call .)
    NAME            reduce using rule 8 (statement -> call .)
    FUNCNAME        reduce using rule 8 (statement -> call .)
    FOR             reduce using rule 8 (statement -> call .)
    IF              reduce using rule 8 (statement -> call .)
    $end            reduce using rule 8 (statement -> call .)
    END             reduce using rule 8 (statement -> call .)
    ELSE            reduce using rule 8 (statement -> call .)


state 8

    (9) statement -> for .

    TYPE            reduce using rule 9 (statement -> for .)
    MUT             reduce using rule 9 (statement -> for .)
    NAME            reduce using rule 9 (statement -> for .)
    FUNCNAME        reduce using rule 9 (statement -> for .)
    FOR             reduce using rule 9 (statement -> for .)
    IF              reduce using rule 9 (statement -> for .)
    $end            reduce using rule 9 (statement -> for .)
    END             reduce using rule 9 (statement -> for .)
    ELSE            reduce using rule 9 (statement -> for .)


state 9

    (10) statement -> if .

    TYPE            reduce using rule 10 (statement -> if .)
    MUT             reduce using rule 10 (statement -> if .)
    NAME            reduce using rule 10 (statement -> if .)
    FUNCNAME        reduce using rule 10 (statement -> if .)
    FOR             reduce using rule 10 (statement -> if .)
    IF              reduce using rule 10 (statement -> if .)
    $end            reduce using rule 10 (statement -> if .)
    END             reduce using rule 10 (statement -> if .)
    ELSE            reduce using rule 10 (statement -> if .)


state 10

    (11) declaration -> TYPE . assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE

    NAME            shift and go to state 12

    assignment                     shift and go to state 17

state 11

    (12) declaration -> MUT . TYPE NAME NEWLINE
    (13) declaration -> MUT . TYPE assignment

    TYPE            shift and go to state 18


state 12

    (14) assignment -> NAME . ASSIGN expression NEWLINE
    (15) assignment -> NAME . ASSIGN call NEWLINE

    ASSIGN          shift and go to state 19


state 13

    (16) call -> FUNCNAME . LPAREN arguments RPAREN NEWLINE

    LPAREN          shift and go to state 20


state 14

    (17) for -> FOR . NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    NAME            shift and go to state 21


state 15

    (18) if -> IF . expression THEN statements END IF NEWLINE
    (19) if -> IF . expression THEN statements ELSE statements END IF NEWLINE
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 22

state 16

    (4) statements -> statements statement .

    TYPE            reduce using rule 4 (statements -> statements statement .)
    MUT             reduce using rule 4 (statements -> statements statement .)
    NAME            reduce using rule 4 (statements -> statements statement .)
    FUNCNAME        reduce using rule 4 (statements -> statements statement .)
    FOR             reduce using rule 4 (statements -> statements statement .)
    IF              reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    END             reduce using rule 4 (statements -> statements statement .)
    ELSE            reduce using rule 4 (statements -> statements statement .)


state 17

    (11) declaration -> TYPE assignment .

    TYPE            reduce using rule 11 (declaration -> TYPE assignment .)
    MUT             reduce using rule 11 (declaration -> TYPE assignment .)
    NAME            reduce using rule 11 (declaration -> TYPE assignment .)
    FUNCNAME        reduce using rule 11 (declaration -> TYPE assignment .)
    FOR             reduce using rule 11 (declaration -> TYPE assignment .)
    IF              reduce using rule 11 (declaration -> TYPE assignment .)
    $end            reduce using rule 11 (declaration -> TYPE assignment .)
    END             reduce using rule 11 (declaration -> TYPE assignment .)
    ELSE            reduce using rule 11 (declaration -> TYPE assignment .)


state 18

    (12) declaration -> MUT TYPE . NAME NEWLINE
    (13) declaration -> MUT TYPE . assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE

    NAME            shift and go to state 32

    assignment                     shift and go to state 33

state 19

    (14) assignment -> NAME ASSIGN . expression NEWLINE
    (15) assignment -> NAME ASSIGN . call NEWLINE
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31
    FUNCNAME        shift and go to state 13

    expression                     shift and go to state 34
    call                           shift and go to state 35

state 20

    (16) call -> FUNCNAME LPAREN . arguments RPAREN NEWLINE
    (20) arguments -> . expression
    (21) arguments -> . arguments COMMA expression
    (22) arguments -> . empty
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL
    (2) empty -> .

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    arguments                      shift and go to state 36
    expression                     shift and go to state 37
    empty                          shift and go to state 38

state 21

    (17) for -> FOR NAME . IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    IN              shift and go to state 39


state 22

    (18) if -> IF expression . THEN statements END IF NEWLINE
    (19) if -> IF expression . THEN statements ELSE statements END IF NEWLINE
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            shift and go to state 41
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 23

    (45) expression -> SUB . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 62

state 24

    (44) expression -> LPAREN . expression RPAREN
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 63

state 25

    (46) expression -> INV . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 64

state 26

    (47) expression -> NOT . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 65

state 27

    (48) expression -> NAME . DOT NAME
    (49) expression -> NAME .

    DOT             shift and go to state 66
    THEN            reduce using rule 49 (expression -> NAME .)
    IF              reduce using rule 49 (expression -> NAME .)
    LSHIFT          reduce using rule 49 (expression -> NAME .)
    RSHIFT          reduce using rule 49 (expression -> NAME .)
    BITAND          reduce using rule 49 (expression -> NAME .)
    BITXOR          reduce using rule 49 (expression -> NAME .)
    BITOR           reduce using rule 49 (expression -> NAME .)
    EXP             reduce using rule 49 (expression -> NAME .)
    MOD             reduce using rule 49 (expression -> NAME .)
    ADD             reduce using rule 49 (expression -> NAME .)
    SUB             reduce using rule 49 (expression -> NAME .)
    MUL             reduce using rule 49 (expression -> NAME .)
    DIV             reduce using rule 49 (expression -> NAME .)
    AND             reduce using rule 49 (expression -> NAME .)
    XOR             reduce using rule 49 (expression -> NAME .)
    NEQ             reduce using rule 49 (expression -> NAME .)
    GTE             reduce using rule 49 (expression -> NAME .)
    LTE             reduce using rule 49 (expression -> NAME .)
    EQ              reduce using rule 49 (expression -> NAME .)
    LT              reduce using rule 49 (expression -> NAME .)
    GT              reduce using rule 49 (expression -> NAME .)
    OR              reduce using rule 49 (expression -> NAME .)
    NEWLINE         reduce using rule 49 (expression -> NAME .)
    RPAREN          reduce using rule 49 (expression -> NAME .)
    COMMA           reduce using rule 49 (expression -> NAME .)
    ELSE            reduce using rule 49 (expression -> NAME .)


state 28

    (50) expression -> INT .

    THEN            reduce using rule 50 (expression -> INT .)
    IF              reduce using rule 50 (expression -> INT .)
    LSHIFT          reduce using rule 50 (expression -> INT .)
    RSHIFT          reduce using rule 50 (expression -> INT .)
    BITAND          reduce using rule 50 (expression -> INT .)
    BITXOR          reduce using rule 50 (expression -> INT .)
    BITOR           reduce using rule 50 (expression -> INT .)
    EXP             reduce using rule 50 (expression -> INT .)
    MOD             reduce using rule 50 (expression -> INT .)
    ADD             reduce using rule 50 (expression -> INT .)
    SUB             reduce using rule 50 (expression -> INT .)
    MUL             reduce using rule 50 (expression -> INT .)
    DIV             reduce using rule 50 (expression -> INT .)
    AND             reduce using rule 50 (expression -> INT .)
    XOR             reduce using rule 50 (expression -> INT .)
    NEQ             reduce using rule 50 (expression -> INT .)
    GTE             reduce using rule 50 (expression -> INT .)
    LTE             reduce using rule 50 (expression -> INT .)
    EQ              reduce using rule 50 (expression -> INT .)
    LT              reduce using rule 50 (expression -> INT .)
    GT              reduce using rule 50 (expression -> INT .)
    OR              reduce using rule 50 (expression -> INT .)
    NEWLINE         reduce using rule 50 (expression -> INT .)
    RPAREN          reduce using rule 50 (expression -> INT .)
    COMMA           reduce using rule 50 (expression -> INT .)
    ELSE            reduce using rule 50 (expression -> INT .)


state 29

    (51) expression -> FLOAT .

    THEN            reduce using rule 51 (expression -> FLOAT .)
    IF              reduce using rule 51 (expression -> FLOAT .)
    LSHIFT          reduce using rule 51 (expression -> FLOAT .)
    RSHIFT          reduce using rule 51 (expression -> FLOAT .)
    BITAND          reduce using rule 51 (expression -> FLOAT .)
    BITXOR          reduce using rule 51 (expression -> FLOAT .)
    BITOR           reduce using rule 51 (expression -> FLOAT .)
    EXP             reduce using rule 51 (expression -> FLOAT .)
    MOD             reduce using rule 51 (expression -> FLOAT .)
    ADD             reduce using rule 51 (expression -> FLOAT .)
    SUB             reduce using rule 51 (expression -> FLOAT .)
    MUL             reduce using rule 51 (expression -> FLOAT .)
    DIV             reduce using rule 51 (expression -> FLOAT .)
    AND             reduce using rule 51 (expression -> FLOAT .)
    XOR             reduce using rule 51 (expression -> FLOAT .)
    NEQ             reduce using rule 51 (expression -> FLOAT .)
    GTE             reduce using rule 51 (expression -> FLOAT .)
    LTE             reduce using rule 51 (expression -> FLOAT .)
    EQ              reduce using rule 51 (expression -> FLOAT .)
    LT              reduce using rule 51 (expression -> FLOAT .)
    GT              reduce using rule 51 (expression -> FLOAT .)
    OR              reduce using rule 51 (expression -> FLOAT .)
    NEWLINE         reduce using rule 51 (expression -> FLOAT .)
    RPAREN          reduce using rule 51 (expression -> FLOAT .)
    COMMA           reduce using rule 51 (expression -> FLOAT .)
    ELSE            reduce using rule 51 (expression -> FLOAT .)


state 30

    (52) expression -> SCI .

    THEN            reduce using rule 52 (expression -> SCI .)
    IF              reduce using rule 52 (expression -> SCI .)
    LSHIFT          reduce using rule 52 (expression -> SCI .)
    RSHIFT          reduce using rule 52 (expression -> SCI .)
    BITAND          reduce using rule 52 (expression -> SCI .)
    BITXOR          reduce using rule 52 (expression -> SCI .)
    BITOR           reduce using rule 52 (expression -> SCI .)
    EXP             reduce using rule 52 (expression -> SCI .)
    MOD             reduce using rule 52 (expression -> SCI .)
    ADD             reduce using rule 52 (expression -> SCI .)
    SUB             reduce using rule 52 (expression -> SCI .)
    MUL             reduce using rule 52 (expression -> SCI .)
    DIV             reduce using rule 52 (expression -> SCI .)
    AND             reduce using rule 52 (expression -> SCI .)
    XOR             reduce using rule 52 (expression -> SCI .)
    NEQ             reduce using rule 52 (expression -> SCI .)
    GTE             reduce using rule 52 (expression -> SCI .)
    LTE             reduce using rule 52 (expression -> SCI .)
    EQ              reduce using rule 52 (expression -> SCI .)
    LT              reduce using rule 52 (expression -> SCI .)
    GT              reduce using rule 52 (expression -> SCI .)
    OR              reduce using rule 52 (expression -> SCI .)
    NEWLINE         reduce using rule 52 (expression -> SCI .)
    RPAREN          reduce using rule 52 (expression -> SCI .)
    COMMA           reduce using rule 52 (expression -> SCI .)
    ELSE            reduce using rule 52 (expression -> SCI .)


state 31

    (53) expression -> BOOL .

    THEN            reduce using rule 53 (expression -> BOOL .)
    IF              reduce using rule 53 (expression -> BOOL .)
    LSHIFT          reduce using rule 53 (expression -> BOOL .)
    RSHIFT          reduce using rule 53 (expression -> BOOL .)
    BITAND          reduce using rule 53 (expression -> BOOL .)
    BITXOR          reduce using rule 53 (expression -> BOOL .)
    BITOR           reduce using rule 53 (expression -> BOOL .)
    EXP             reduce using rule 53 (expression -> BOOL .)
    MOD             reduce using rule 53 (expression -> BOOL .)
    ADD             reduce using rule 53 (expression -> BOOL .)
    SUB             reduce using rule 53 (expression -> BOOL .)
    MUL             reduce using rule 53 (expression -> BOOL .)
    DIV             reduce using rule 53 (expression -> BOOL .)
    AND             reduce using rule 53 (expression -> BOOL .)
    XOR             reduce using rule 53 (expression -> BOOL .)
    NEQ             reduce using rule 53 (expression -> BOOL .)
    GTE             reduce using rule 53 (expression -> BOOL .)
    LTE             reduce using rule 53 (expression -> BOOL .)
    EQ              reduce using rule 53 (expression -> BOOL .)
    LT              reduce using rule 53 (expression -> BOOL .)
    GT              reduce using rule 53 (expression -> BOOL .)
    OR              reduce using rule 53 (expression -> BOOL .)
    NEWLINE         reduce using rule 53 (expression -> BOOL .)
    RPAREN          reduce using rule 53 (expression -> BOOL .)
    COMMA           reduce using rule 53 (expression -> BOOL .)
    ELSE            reduce using rule 53 (expression -> BOOL .)


state 32

    (12) declaration -> MUT TYPE NAME . NEWLINE
    (14) assignment -> NAME . ASSIGN expression NEWLINE
    (15) assignment -> NAME . ASSIGN call NEWLINE

    NEWLINE         shift and go to state 67
    ASSIGN          shift and go to state 19


state 33

    (13) declaration -> MUT TYPE assignment .

    TYPE            reduce using rule 13 (declaration -> MUT TYPE assignment .)
    MUT             reduce using rule 13 (declaration -> MUT TYPE assignment .)
    NAME            reduce using rule 13 (declaration -> MUT TYPE assignment .)
    FUNCNAME        reduce using rule 13 (declaration -> MUT TYPE assignment .)
    FOR             reduce using rule 13 (declaration -> MUT TYPE assignment .)
    IF              reduce using rule 13 (declaration -> MUT TYPE assignment .)
    $end            reduce using rule 13 (declaration -> MUT TYPE assignment .)
    END             reduce using rule 13 (declaration -> MUT TYPE assignment .)
    ELSE            reduce using rule 13 (declaration -> MUT TYPE assignment .)


state 34

    (14) assignment -> NAME ASSIGN expression . NEWLINE
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    NEWLINE         shift and go to state 68
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 35

    (15) assignment -> NAME ASSIGN call . NEWLINE

    NEWLINE         shift and go to state 69


state 36

    (16) call -> FUNCNAME LPAREN arguments . RPAREN NEWLINE
    (21) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 70
    COMMA           shift and go to state 71


state 37

    (20) arguments -> expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    RPAREN          reduce using rule 20 (arguments -> expression .)
    COMMA           reduce using rule 20 (arguments -> expression .)
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 38

    (22) arguments -> empty .

    RPAREN          reduce using rule 22 (arguments -> empty .)
    COMMA           reduce using rule 22 (arguments -> empty .)


state 39

    (17) for -> FOR NAME IN . LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    LPAREN          shift and go to state 72


state 40

    (23) expression -> expression IF . expression ELSE expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 73

state 41

    (18) if -> IF expression THEN . statements END IF NEWLINE
    (19) if -> IF expression THEN . statements ELSE statements END IF NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (2) empty -> .
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 74
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 42

    (24) expression -> expression LSHIFT . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 75

state 43

    (25) expression -> expression RSHIFT . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 76

state 44

    (26) expression -> expression BITAND . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 77

state 45

    (27) expression -> expression BITXOR . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 78

state 46

    (28) expression -> expression BITOR . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 79

state 47

    (29) expression -> expression EXP . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 80

state 48

    (30) expression -> expression MOD . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 81

state 49

    (31) expression -> expression ADD . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 82

state 50

    (32) expression -> expression SUB . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 83

state 51

    (33) expression -> expression MUL . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 84

state 52

    (34) expression -> expression DIV . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 85

state 53

    (35) expression -> expression AND . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 86

state 54

    (36) expression -> expression XOR . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 87

state 55

    (37) expression -> expression NEQ . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 88

state 56

    (38) expression -> expression GTE . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 89

state 57

    (39) expression -> expression LTE . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 90

state 58

    (40) expression -> expression EQ . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 91

state 59

    (41) expression -> expression LT . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 92

state 60

    (42) expression -> expression GT . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 93

state 61

    (43) expression -> expression OR . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 94

state 62

    (45) expression -> SUB expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 45 (expression -> SUB expression .)
    IF              reduce using rule 45 (expression -> SUB expression .)
    LSHIFT          reduce using rule 45 (expression -> SUB expression .)
    RSHIFT          reduce using rule 45 (expression -> SUB expression .)
    BITAND          reduce using rule 45 (expression -> SUB expression .)
    BITXOR          reduce using rule 45 (expression -> SUB expression .)
    BITOR           reduce using rule 45 (expression -> SUB expression .)
    MOD             reduce using rule 45 (expression -> SUB expression .)
    ADD             reduce using rule 45 (expression -> SUB expression .)
    SUB             reduce using rule 45 (expression -> SUB expression .)
    MUL             reduce using rule 45 (expression -> SUB expression .)
    DIV             reduce using rule 45 (expression -> SUB expression .)
    AND             reduce using rule 45 (expression -> SUB expression .)
    XOR             reduce using rule 45 (expression -> SUB expression .)
    NEQ             reduce using rule 45 (expression -> SUB expression .)
    GTE             reduce using rule 45 (expression -> SUB expression .)
    LTE             reduce using rule 45 (expression -> SUB expression .)
    EQ              reduce using rule 45 (expression -> SUB expression .)
    LT              reduce using rule 45 (expression -> SUB expression .)
    GT              reduce using rule 45 (expression -> SUB expression .)
    OR              reduce using rule 45 (expression -> SUB expression .)
    NEWLINE         reduce using rule 45 (expression -> SUB expression .)
    RPAREN          reduce using rule 45 (expression -> SUB expression .)
    COMMA           reduce using rule 45 (expression -> SUB expression .)
    ELSE            reduce using rule 45 (expression -> SUB expression .)
    EXP             shift and go to state 47

  ! EXP             [ reduce using rule 45 (expression -> SUB expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 63

    (44) expression -> LPAREN expression . RPAREN
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    RPAREN          shift and go to state 95
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 64

    (46) expression -> INV expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 46 (expression -> INV expression .)
    IF              reduce using rule 46 (expression -> INV expression .)
    LSHIFT          reduce using rule 46 (expression -> INV expression .)
    RSHIFT          reduce using rule 46 (expression -> INV expression .)
    BITAND          reduce using rule 46 (expression -> INV expression .)
    BITXOR          reduce using rule 46 (expression -> INV expression .)
    BITOR           reduce using rule 46 (expression -> INV expression .)
    AND             reduce using rule 46 (expression -> INV expression .)
    XOR             reduce using rule 46 (expression -> INV expression .)
    NEQ             reduce using rule 46 (expression -> INV expression .)
    GTE             reduce using rule 46 (expression -> INV expression .)
    LTE             reduce using rule 46 (expression -> INV expression .)
    EQ              reduce using rule 46 (expression -> INV expression .)
    LT              reduce using rule 46 (expression -> INV expression .)
    GT              reduce using rule 46 (expression -> INV expression .)
    OR              reduce using rule 46 (expression -> INV expression .)
    NEWLINE         reduce using rule 46 (expression -> INV expression .)
    RPAREN          reduce using rule 46 (expression -> INV expression .)
    COMMA           reduce using rule 46 (expression -> INV expression .)
    ELSE            reduce using rule 46 (expression -> INV expression .)
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! EXP             [ reduce using rule 46 (expression -> INV expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> INV expression .) ]
  ! ADD             [ reduce using rule 46 (expression -> INV expression .) ]
  ! SUB             [ reduce using rule 46 (expression -> INV expression .) ]
  ! MUL             [ reduce using rule 46 (expression -> INV expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> INV expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 65

    (47) expression -> NOT expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 47 (expression -> NOT expression .)
    IF              reduce using rule 47 (expression -> NOT expression .)
    AND             reduce using rule 47 (expression -> NOT expression .)
    XOR             reduce using rule 47 (expression -> NOT expression .)
    OR              reduce using rule 47 (expression -> NOT expression .)
    NEWLINE         reduce using rule 47 (expression -> NOT expression .)
    RPAREN          reduce using rule 47 (expression -> NOT expression .)
    COMMA           reduce using rule 47 (expression -> NOT expression .)
    ELSE            reduce using rule 47 (expression -> NOT expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60

  ! LSHIFT          [ reduce using rule 47 (expression -> NOT expression .) ]
  ! RSHIFT          [ reduce using rule 47 (expression -> NOT expression .) ]
  ! BITAND          [ reduce using rule 47 (expression -> NOT expression .) ]
  ! BITXOR          [ reduce using rule 47 (expression -> NOT expression .) ]
  ! BITOR           [ reduce using rule 47 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! ADD             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! SUB             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! GTE             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! LTE             [ reduce using rule 47 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 47 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 47 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 47 (expression -> NOT expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 66

    (48) expression -> NAME DOT . NAME

    NAME            shift and go to state 96


state 67

    (12) declaration -> MUT TYPE NAME NEWLINE .

    TYPE            reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    MUT             reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    NAME            reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    FUNCNAME        reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    FOR             reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    IF              reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    $end            reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    END             reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)
    ELSE            reduce using rule 12 (declaration -> MUT TYPE NAME NEWLINE .)


state 68

    (14) assignment -> NAME ASSIGN expression NEWLINE .

    TYPE            reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    MUT             reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    NAME            reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    FUNCNAME        reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    FOR             reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    IF              reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    $end            reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    END             reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)
    ELSE            reduce using rule 14 (assignment -> NAME ASSIGN expression NEWLINE .)


state 69

    (15) assignment -> NAME ASSIGN call NEWLINE .

    TYPE            reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    MUT             reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    NAME            reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    FUNCNAME        reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    FOR             reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    IF              reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    $end            reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    END             reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)
    ELSE            reduce using rule 15 (assignment -> NAME ASSIGN call NEWLINE .)


state 70

    (16) call -> FUNCNAME LPAREN arguments RPAREN . NEWLINE

    NEWLINE         shift and go to state 97


state 71

    (21) arguments -> arguments COMMA . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 98

state 72

    (17) for -> FOR NAME IN LPAREN . arguments RPAREN LOOP statements END LOOP NEWLINE
    (20) arguments -> . expression
    (21) arguments -> . arguments COMMA expression
    (22) arguments -> . empty
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL
    (2) empty -> .

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    arguments                      shift and go to state 99
    expression                     shift and go to state 37
    empty                          shift and go to state 38

state 73

    (23) expression -> expression IF expression . ELSE expression
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    ELSE            shift and go to state 100
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 74

    (18) if -> IF expression THEN statements . END IF NEWLINE
    (19) if -> IF expression THEN statements . ELSE statements END IF NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

    END             shift and go to state 101
    ELSE            shift and go to state 102
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 16
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 75

    (24) expression -> expression LSHIFT expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 24 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 24 (expression -> expression LSHIFT expression .)
    LSHIFT          reduce using rule 24 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 24 (expression -> expression LSHIFT expression .)
    BITAND          reduce using rule 24 (expression -> expression LSHIFT expression .)
    BITXOR          reduce using rule 24 (expression -> expression LSHIFT expression .)
    BITOR           reduce using rule 24 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 24 (expression -> expression LSHIFT expression .)
    XOR             reduce using rule 24 (expression -> expression LSHIFT expression .)
    NEQ             reduce using rule 24 (expression -> expression LSHIFT expression .)
    GTE             reduce using rule 24 (expression -> expression LSHIFT expression .)
    LTE             reduce using rule 24 (expression -> expression LSHIFT expression .)
    EQ              reduce using rule 24 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 24 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 24 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 24 (expression -> expression LSHIFT expression .)
    NEWLINE         reduce using rule 24 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 24 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 24 (expression -> expression LSHIFT expression .)
    ELSE            reduce using rule 24 (expression -> expression LSHIFT expression .)
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! EXP             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! ADD             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! SUB             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! MUL             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! DIV             [ reduce using rule 24 (expression -> expression LSHIFT expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 76

    (25) expression -> expression RSHIFT expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 25 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 25 (expression -> expression RSHIFT expression .)
    LSHIFT          reduce using rule 25 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 25 (expression -> expression RSHIFT expression .)
    BITAND          reduce using rule 25 (expression -> expression RSHIFT expression .)
    BITXOR          reduce using rule 25 (expression -> expression RSHIFT expression .)
    BITOR           reduce using rule 25 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 25 (expression -> expression RSHIFT expression .)
    XOR             reduce using rule 25 (expression -> expression RSHIFT expression .)
    NEQ             reduce using rule 25 (expression -> expression RSHIFT expression .)
    GTE             reduce using rule 25 (expression -> expression RSHIFT expression .)
    LTE             reduce using rule 25 (expression -> expression RSHIFT expression .)
    EQ              reduce using rule 25 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 25 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 25 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 25 (expression -> expression RSHIFT expression .)
    NEWLINE         reduce using rule 25 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 25 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 25 (expression -> expression RSHIFT expression .)
    ELSE            reduce using rule 25 (expression -> expression RSHIFT expression .)
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! EXP             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! ADD             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! SUB             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! MUL             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! DIV             [ reduce using rule 25 (expression -> expression RSHIFT expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 77

    (26) expression -> expression BITAND expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 26 (expression -> expression BITAND expression .)
    IF              reduce using rule 26 (expression -> expression BITAND expression .)
    BITAND          reduce using rule 26 (expression -> expression BITAND expression .)
    BITXOR          reduce using rule 26 (expression -> expression BITAND expression .)
    BITOR           reduce using rule 26 (expression -> expression BITAND expression .)
    AND             reduce using rule 26 (expression -> expression BITAND expression .)
    XOR             reduce using rule 26 (expression -> expression BITAND expression .)
    NEQ             reduce using rule 26 (expression -> expression BITAND expression .)
    GTE             reduce using rule 26 (expression -> expression BITAND expression .)
    LTE             reduce using rule 26 (expression -> expression BITAND expression .)
    EQ              reduce using rule 26 (expression -> expression BITAND expression .)
    LT              reduce using rule 26 (expression -> expression BITAND expression .)
    GT              reduce using rule 26 (expression -> expression BITAND expression .)
    OR              reduce using rule 26 (expression -> expression BITAND expression .)
    NEWLINE         reduce using rule 26 (expression -> expression BITAND expression .)
    RPAREN          reduce using rule 26 (expression -> expression BITAND expression .)
    COMMA           reduce using rule 26 (expression -> expression BITAND expression .)
    ELSE            reduce using rule 26 (expression -> expression BITAND expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! RSHIFT          [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! EXP             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! MOD             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! ADD             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! SUB             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! MUL             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! DIV             [ reduce using rule 26 (expression -> expression BITAND expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 78

    (27) expression -> expression BITXOR expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 27 (expression -> expression BITXOR expression .)
    IF              reduce using rule 27 (expression -> expression BITXOR expression .)
    BITXOR          reduce using rule 27 (expression -> expression BITXOR expression .)
    BITOR           reduce using rule 27 (expression -> expression BITXOR expression .)
    AND             reduce using rule 27 (expression -> expression BITXOR expression .)
    XOR             reduce using rule 27 (expression -> expression BITXOR expression .)
    NEQ             reduce using rule 27 (expression -> expression BITXOR expression .)
    GTE             reduce using rule 27 (expression -> expression BITXOR expression .)
    LTE             reduce using rule 27 (expression -> expression BITXOR expression .)
    EQ              reduce using rule 27 (expression -> expression BITXOR expression .)
    LT              reduce using rule 27 (expression -> expression BITXOR expression .)
    GT              reduce using rule 27 (expression -> expression BITXOR expression .)
    OR              reduce using rule 27 (expression -> expression BITXOR expression .)
    NEWLINE         reduce using rule 27 (expression -> expression BITXOR expression .)
    RPAREN          reduce using rule 27 (expression -> expression BITXOR expression .)
    COMMA           reduce using rule 27 (expression -> expression BITXOR expression .)
    ELSE            reduce using rule 27 (expression -> expression BITXOR expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! RSHIFT          [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! BITAND          [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! EXP             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! MOD             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! ADD             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! SUB             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! MUL             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> expression BITXOR expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 79

    (28) expression -> expression BITOR expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 28 (expression -> expression BITOR expression .)
    IF              reduce using rule 28 (expression -> expression BITOR expression .)
    BITOR           reduce using rule 28 (expression -> expression BITOR expression .)
    AND             reduce using rule 28 (expression -> expression BITOR expression .)
    XOR             reduce using rule 28 (expression -> expression BITOR expression .)
    NEQ             reduce using rule 28 (expression -> expression BITOR expression .)
    GTE             reduce using rule 28 (expression -> expression BITOR expression .)
    LTE             reduce using rule 28 (expression -> expression BITOR expression .)
    EQ              reduce using rule 28 (expression -> expression BITOR expression .)
    LT              reduce using rule 28 (expression -> expression BITOR expression .)
    GT              reduce using rule 28 (expression -> expression BITOR expression .)
    OR              reduce using rule 28 (expression -> expression BITOR expression .)
    NEWLINE         reduce using rule 28 (expression -> expression BITOR expression .)
    RPAREN          reduce using rule 28 (expression -> expression BITOR expression .)
    COMMA           reduce using rule 28 (expression -> expression BITOR expression .)
    ELSE            reduce using rule 28 (expression -> expression BITOR expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! RSHIFT          [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! BITAND          [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! BITXOR          [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! EXP             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! MOD             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! ADD             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! SUB             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! MUL             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! DIV             [ reduce using rule 28 (expression -> expression BITOR expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! BITOR           [ shift and go to state 46 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 80

    (29) expression -> expression EXP expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 29 (expression -> expression EXP expression .)
    IF              reduce using rule 29 (expression -> expression EXP expression .)
    LSHIFT          reduce using rule 29 (expression -> expression EXP expression .)
    RSHIFT          reduce using rule 29 (expression -> expression EXP expression .)
    BITAND          reduce using rule 29 (expression -> expression EXP expression .)
    BITXOR          reduce using rule 29 (expression -> expression EXP expression .)
    BITOR           reduce using rule 29 (expression -> expression EXP expression .)
    MOD             reduce using rule 29 (expression -> expression EXP expression .)
    ADD             reduce using rule 29 (expression -> expression EXP expression .)
    SUB             reduce using rule 29 (expression -> expression EXP expression .)
    MUL             reduce using rule 29 (expression -> expression EXP expression .)
    DIV             reduce using rule 29 (expression -> expression EXP expression .)
    AND             reduce using rule 29 (expression -> expression EXP expression .)
    XOR             reduce using rule 29 (expression -> expression EXP expression .)
    NEQ             reduce using rule 29 (expression -> expression EXP expression .)
    GTE             reduce using rule 29 (expression -> expression EXP expression .)
    LTE             reduce using rule 29 (expression -> expression EXP expression .)
    EQ              reduce using rule 29 (expression -> expression EXP expression .)
    LT              reduce using rule 29 (expression -> expression EXP expression .)
    GT              reduce using rule 29 (expression -> expression EXP expression .)
    OR              reduce using rule 29 (expression -> expression EXP expression .)
    NEWLINE         reduce using rule 29 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 29 (expression -> expression EXP expression .)
    COMMA           reduce using rule 29 (expression -> expression EXP expression .)
    ELSE            reduce using rule 29 (expression -> expression EXP expression .)
    EXP             shift and go to state 47

  ! EXP             [ reduce using rule 29 (expression -> expression EXP expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 81

    (30) expression -> expression MOD expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 30 (expression -> expression MOD expression .)
    IF              reduce using rule 30 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 30 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 30 (expression -> expression MOD expression .)
    BITAND          reduce using rule 30 (expression -> expression MOD expression .)
    BITXOR          reduce using rule 30 (expression -> expression MOD expression .)
    BITOR           reduce using rule 30 (expression -> expression MOD expression .)
    MOD             reduce using rule 30 (expression -> expression MOD expression .)
    ADD             reduce using rule 30 (expression -> expression MOD expression .)
    SUB             reduce using rule 30 (expression -> expression MOD expression .)
    MUL             reduce using rule 30 (expression -> expression MOD expression .)
    DIV             reduce using rule 30 (expression -> expression MOD expression .)
    AND             reduce using rule 30 (expression -> expression MOD expression .)
    XOR             reduce using rule 30 (expression -> expression MOD expression .)
    NEQ             reduce using rule 30 (expression -> expression MOD expression .)
    GTE             reduce using rule 30 (expression -> expression MOD expression .)
    LTE             reduce using rule 30 (expression -> expression MOD expression .)
    EQ              reduce using rule 30 (expression -> expression MOD expression .)
    LT              reduce using rule 30 (expression -> expression MOD expression .)
    GT              reduce using rule 30 (expression -> expression MOD expression .)
    OR              reduce using rule 30 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 30 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 30 (expression -> expression MOD expression .)
    COMMA           reduce using rule 30 (expression -> expression MOD expression .)
    ELSE            reduce using rule 30 (expression -> expression MOD expression .)
    EXP             shift and go to state 47

  ! EXP             [ reduce using rule 30 (expression -> expression MOD expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 82

    (31) expression -> expression ADD expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 31 (expression -> expression ADD expression .)
    IF              reduce using rule 31 (expression -> expression ADD expression .)
    LSHIFT          reduce using rule 31 (expression -> expression ADD expression .)
    RSHIFT          reduce using rule 31 (expression -> expression ADD expression .)
    BITAND          reduce using rule 31 (expression -> expression ADD expression .)
    BITXOR          reduce using rule 31 (expression -> expression ADD expression .)
    BITOR           reduce using rule 31 (expression -> expression ADD expression .)
    ADD             reduce using rule 31 (expression -> expression ADD expression .)
    SUB             reduce using rule 31 (expression -> expression ADD expression .)
    AND             reduce using rule 31 (expression -> expression ADD expression .)
    XOR             reduce using rule 31 (expression -> expression ADD expression .)
    NEQ             reduce using rule 31 (expression -> expression ADD expression .)
    GTE             reduce using rule 31 (expression -> expression ADD expression .)
    LTE             reduce using rule 31 (expression -> expression ADD expression .)
    EQ              reduce using rule 31 (expression -> expression ADD expression .)
    LT              reduce using rule 31 (expression -> expression ADD expression .)
    GT              reduce using rule 31 (expression -> expression ADD expression .)
    OR              reduce using rule 31 (expression -> expression ADD expression .)
    NEWLINE         reduce using rule 31 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 31 (expression -> expression ADD expression .)
    COMMA           reduce using rule 31 (expression -> expression ADD expression .)
    ELSE            reduce using rule 31 (expression -> expression ADD expression .)
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! EXP             [ reduce using rule 31 (expression -> expression ADD expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> expression ADD expression .) ]
  ! MUL             [ reduce using rule 31 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> expression ADD expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 83

    (32) expression -> expression SUB expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 32 (expression -> expression SUB expression .)
    IF              reduce using rule 32 (expression -> expression SUB expression .)
    LSHIFT          reduce using rule 32 (expression -> expression SUB expression .)
    RSHIFT          reduce using rule 32 (expression -> expression SUB expression .)
    BITAND          reduce using rule 32 (expression -> expression SUB expression .)
    BITXOR          reduce using rule 32 (expression -> expression SUB expression .)
    BITOR           reduce using rule 32 (expression -> expression SUB expression .)
    ADD             reduce using rule 32 (expression -> expression SUB expression .)
    SUB             reduce using rule 32 (expression -> expression SUB expression .)
    AND             reduce using rule 32 (expression -> expression SUB expression .)
    XOR             reduce using rule 32 (expression -> expression SUB expression .)
    NEQ             reduce using rule 32 (expression -> expression SUB expression .)
    GTE             reduce using rule 32 (expression -> expression SUB expression .)
    LTE             reduce using rule 32 (expression -> expression SUB expression .)
    EQ              reduce using rule 32 (expression -> expression SUB expression .)
    LT              reduce using rule 32 (expression -> expression SUB expression .)
    GT              reduce using rule 32 (expression -> expression SUB expression .)
    OR              reduce using rule 32 (expression -> expression SUB expression .)
    NEWLINE         reduce using rule 32 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 32 (expression -> expression SUB expression .)
    COMMA           reduce using rule 32 (expression -> expression SUB expression .)
    ELSE            reduce using rule 32 (expression -> expression SUB expression .)
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! EXP             [ reduce using rule 32 (expression -> expression SUB expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> expression SUB expression .) ]
  ! MUL             [ reduce using rule 32 (expression -> expression SUB expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> expression SUB expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 84

    (33) expression -> expression MUL expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 33 (expression -> expression MUL expression .)
    IF              reduce using rule 33 (expression -> expression MUL expression .)
    LSHIFT          reduce using rule 33 (expression -> expression MUL expression .)
    RSHIFT          reduce using rule 33 (expression -> expression MUL expression .)
    BITAND          reduce using rule 33 (expression -> expression MUL expression .)
    BITXOR          reduce using rule 33 (expression -> expression MUL expression .)
    BITOR           reduce using rule 33 (expression -> expression MUL expression .)
    MOD             reduce using rule 33 (expression -> expression MUL expression .)
    ADD             reduce using rule 33 (expression -> expression MUL expression .)
    SUB             reduce using rule 33 (expression -> expression MUL expression .)
    MUL             reduce using rule 33 (expression -> expression MUL expression .)
    DIV             reduce using rule 33 (expression -> expression MUL expression .)
    AND             reduce using rule 33 (expression -> expression MUL expression .)
    XOR             reduce using rule 33 (expression -> expression MUL expression .)
    NEQ             reduce using rule 33 (expression -> expression MUL expression .)
    GTE             reduce using rule 33 (expression -> expression MUL expression .)
    LTE             reduce using rule 33 (expression -> expression MUL expression .)
    EQ              reduce using rule 33 (expression -> expression MUL expression .)
    LT              reduce using rule 33 (expression -> expression MUL expression .)
    GT              reduce using rule 33 (expression -> expression MUL expression .)
    OR              reduce using rule 33 (expression -> expression MUL expression .)
    NEWLINE         reduce using rule 33 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 33 (expression -> expression MUL expression .)
    COMMA           reduce using rule 33 (expression -> expression MUL expression .)
    ELSE            reduce using rule 33 (expression -> expression MUL expression .)
    EXP             shift and go to state 47

  ! EXP             [ reduce using rule 33 (expression -> expression MUL expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 85

    (34) expression -> expression DIV expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 34 (expression -> expression DIV expression .)
    IF              reduce using rule 34 (expression -> expression DIV expression .)
    LSHIFT          reduce using rule 34 (expression -> expression DIV expression .)
    RSHIFT          reduce using rule 34 (expression -> expression DIV expression .)
    BITAND          reduce using rule 34 (expression -> expression DIV expression .)
    BITXOR          reduce using rule 34 (expression -> expression DIV expression .)
    BITOR           reduce using rule 34 (expression -> expression DIV expression .)
    MOD             reduce using rule 34 (expression -> expression DIV expression .)
    ADD             reduce using rule 34 (expression -> expression DIV expression .)
    SUB             reduce using rule 34 (expression -> expression DIV expression .)
    MUL             reduce using rule 34 (expression -> expression DIV expression .)
    DIV             reduce using rule 34 (expression -> expression DIV expression .)
    AND             reduce using rule 34 (expression -> expression DIV expression .)
    XOR             reduce using rule 34 (expression -> expression DIV expression .)
    NEQ             reduce using rule 34 (expression -> expression DIV expression .)
    GTE             reduce using rule 34 (expression -> expression DIV expression .)
    LTE             reduce using rule 34 (expression -> expression DIV expression .)
    EQ              reduce using rule 34 (expression -> expression DIV expression .)
    LT              reduce using rule 34 (expression -> expression DIV expression .)
    GT              reduce using rule 34 (expression -> expression DIV expression .)
    OR              reduce using rule 34 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 34 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 34 (expression -> expression DIV expression .)
    COMMA           reduce using rule 34 (expression -> expression DIV expression .)
    ELSE            reduce using rule 34 (expression -> expression DIV expression .)
    EXP             shift and go to state 47

  ! EXP             [ reduce using rule 34 (expression -> expression DIV expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! LSHIFT          [ shift and go to state 42 ]
  ! RSHIFT          [ shift and go to state 43 ]
  ! BITAND          [ shift and go to state 44 ]
  ! BITXOR          [ shift and go to state 45 ]
  ! BITOR           [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! ADD             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 86

    (35) expression -> expression AND expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 35 (expression -> expression AND expression .)
    IF              reduce using rule 35 (expression -> expression AND expression .)
    AND             reduce using rule 35 (expression -> expression AND expression .)
    XOR             reduce using rule 35 (expression -> expression AND expression .)
    OR              reduce using rule 35 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 35 (expression -> expression AND expression .)
    RPAREN          reduce using rule 35 (expression -> expression AND expression .)
    COMMA           reduce using rule 35 (expression -> expression AND expression .)
    ELSE            reduce using rule 35 (expression -> expression AND expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60

  ! LSHIFT          [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! BITAND          [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! BITXOR          [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! BITOR           [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! ADD             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! SUB             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! GTE             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! LTE             [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 35 (expression -> expression AND expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 87

    (36) expression -> expression XOR expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
  ! shift/reduce conflict for BITXOR resolved as shift
  ! shift/reduce conflict for BITOR resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 36 (expression -> expression XOR expression .)
    NEWLINE         reduce using rule 36 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 36 (expression -> expression XOR expression .)
    COMMA           reduce using rule 36 (expression -> expression XOR expression .)
    ELSE            reduce using rule 36 (expression -> expression XOR expression .)
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61

  ! IF              [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! LSHIFT          [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! RSHIFT          [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! BITAND          [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! BITXOR          [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! BITOR           [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! EXP             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! ADD             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! SUB             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! MUL             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! NEQ             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! GTE             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! LTE             [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 36 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression XOR expression .) ]


state 88

    (37) expression -> expression NEQ expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 37 (expression -> expression NEQ expression .)
    IF              reduce using rule 37 (expression -> expression NEQ expression .)
    AND             reduce using rule 37 (expression -> expression NEQ expression .)
    XOR             reduce using rule 37 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 37 (expression -> expression NEQ expression .)
    GTE             reduce using rule 37 (expression -> expression NEQ expression .)
    LTE             reduce using rule 37 (expression -> expression NEQ expression .)
    EQ              reduce using rule 37 (expression -> expression NEQ expression .)
    LT              reduce using rule 37 (expression -> expression NEQ expression .)
    GT              reduce using rule 37 (expression -> expression NEQ expression .)
    OR              reduce using rule 37 (expression -> expression NEQ expression .)
    NEWLINE         reduce using rule 37 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 37 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 37 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 37 (expression -> expression NEQ expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! RSHIFT          [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! BITAND          [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! BITXOR          [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! BITOR           [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! ADD             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! SUB             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression NEQ expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 89

    (38) expression -> expression GTE expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 38 (expression -> expression GTE expression .)
    IF              reduce using rule 38 (expression -> expression GTE expression .)
    AND             reduce using rule 38 (expression -> expression GTE expression .)
    XOR             reduce using rule 38 (expression -> expression GTE expression .)
    NEQ             reduce using rule 38 (expression -> expression GTE expression .)
    GTE             reduce using rule 38 (expression -> expression GTE expression .)
    LTE             reduce using rule 38 (expression -> expression GTE expression .)
    EQ              reduce using rule 38 (expression -> expression GTE expression .)
    LT              reduce using rule 38 (expression -> expression GTE expression .)
    GT              reduce using rule 38 (expression -> expression GTE expression .)
    OR              reduce using rule 38 (expression -> expression GTE expression .)
    NEWLINE         reduce using rule 38 (expression -> expression GTE expression .)
    RPAREN          reduce using rule 38 (expression -> expression GTE expression .)
    COMMA           reduce using rule 38 (expression -> expression GTE expression .)
    ELSE            reduce using rule 38 (expression -> expression GTE expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! BITAND          [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! BITXOR          [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! BITOR           [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! ADD             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! SUB             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression GTE expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 90

    (39) expression -> expression LTE expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 39 (expression -> expression LTE expression .)
    IF              reduce using rule 39 (expression -> expression LTE expression .)
    AND             reduce using rule 39 (expression -> expression LTE expression .)
    XOR             reduce using rule 39 (expression -> expression LTE expression .)
    NEQ             reduce using rule 39 (expression -> expression LTE expression .)
    GTE             reduce using rule 39 (expression -> expression LTE expression .)
    LTE             reduce using rule 39 (expression -> expression LTE expression .)
    EQ              reduce using rule 39 (expression -> expression LTE expression .)
    LT              reduce using rule 39 (expression -> expression LTE expression .)
    GT              reduce using rule 39 (expression -> expression LTE expression .)
    OR              reduce using rule 39 (expression -> expression LTE expression .)
    NEWLINE         reduce using rule 39 (expression -> expression LTE expression .)
    RPAREN          reduce using rule 39 (expression -> expression LTE expression .)
    COMMA           reduce using rule 39 (expression -> expression LTE expression .)
    ELSE            reduce using rule 39 (expression -> expression LTE expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! BITAND          [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! BITXOR          [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! BITOR           [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! ADD             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! SUB             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression LTE expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 91

    (40) expression -> expression EQ expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 40 (expression -> expression EQ expression .)
    IF              reduce using rule 40 (expression -> expression EQ expression .)
    AND             reduce using rule 40 (expression -> expression EQ expression .)
    XOR             reduce using rule 40 (expression -> expression EQ expression .)
    NEQ             reduce using rule 40 (expression -> expression EQ expression .)
    GTE             reduce using rule 40 (expression -> expression EQ expression .)
    LTE             reduce using rule 40 (expression -> expression EQ expression .)
    EQ              reduce using rule 40 (expression -> expression EQ expression .)
    LT              reduce using rule 40 (expression -> expression EQ expression .)
    GT              reduce using rule 40 (expression -> expression EQ expression .)
    OR              reduce using rule 40 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 40 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 40 (expression -> expression EQ expression .)
    COMMA           reduce using rule 40 (expression -> expression EQ expression .)
    ELSE            reduce using rule 40 (expression -> expression EQ expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! BITAND          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! BITXOR          [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! BITOR           [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! ADD             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! SUB             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression EQ expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 92

    (41) expression -> expression LT expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 41 (expression -> expression LT expression .)
    IF              reduce using rule 41 (expression -> expression LT expression .)
    AND             reduce using rule 41 (expression -> expression LT expression .)
    XOR             reduce using rule 41 (expression -> expression LT expression .)
    NEQ             reduce using rule 41 (expression -> expression LT expression .)
    GTE             reduce using rule 41 (expression -> expression LT expression .)
    LTE             reduce using rule 41 (expression -> expression LT expression .)
    EQ              reduce using rule 41 (expression -> expression LT expression .)
    LT              reduce using rule 41 (expression -> expression LT expression .)
    GT              reduce using rule 41 (expression -> expression LT expression .)
    OR              reduce using rule 41 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 41 (expression -> expression LT expression .)
    RPAREN          reduce using rule 41 (expression -> expression LT expression .)
    COMMA           reduce using rule 41 (expression -> expression LT expression .)
    ELSE            reduce using rule 41 (expression -> expression LT expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! BITAND          [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! BITXOR          [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! BITOR           [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! EXP             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! ADD             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! SUB             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression LT expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 93

    (42) expression -> expression GT expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 42 (expression -> expression GT expression .)
    IF              reduce using rule 42 (expression -> expression GT expression .)
    AND             reduce using rule 42 (expression -> expression GT expression .)
    XOR             reduce using rule 42 (expression -> expression GT expression .)
    NEQ             reduce using rule 42 (expression -> expression GT expression .)
    GTE             reduce using rule 42 (expression -> expression GT expression .)
    LTE             reduce using rule 42 (expression -> expression GT expression .)
    EQ              reduce using rule 42 (expression -> expression GT expression .)
    LT              reduce using rule 42 (expression -> expression GT expression .)
    GT              reduce using rule 42 (expression -> expression GT expression .)
    OR              reduce using rule 42 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 42 (expression -> expression GT expression .)
    RPAREN          reduce using rule 42 (expression -> expression GT expression .)
    COMMA           reduce using rule 42 (expression -> expression GT expression .)
    ELSE            reduce using rule 42 (expression -> expression GT expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! LSHIFT          [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! BITAND          [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! BITXOR          [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! BITOR           [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! EXP             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! ADD             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! SUB             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 53 ]
  ! XOR             [ shift and go to state 54 ]
  ! NEQ             [ shift and go to state 55 ]
  ! GTE             [ shift and go to state 56 ]
  ! LTE             [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LT              [ shift and go to state 59 ]
  ! GT              [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]


state 94

    (43) expression -> expression OR expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    THEN            reduce using rule 43 (expression -> expression OR expression .)
    IF              reduce using rule 43 (expression -> expression OR expression .)
    XOR             reduce using rule 43 (expression -> expression OR expression .)
    OR              reduce using rule 43 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 43 (expression -> expression OR expression .)
    RPAREN          reduce using rule 43 (expression -> expression OR expression .)
    COMMA           reduce using rule 43 (expression -> expression OR expression .)
    ELSE            reduce using rule 43 (expression -> expression OR expression .)
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60

  ! LSHIFT          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! BITAND          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! BITXOR          [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! BITOR           [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! ADD             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! SUB             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GTE             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LTE             [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression OR expression .) ]
  ! IF              [ shift and go to state 40 ]
  ! XOR             [ shift and go to state 54 ]
  ! OR              [ shift and go to state 61 ]


state 95

    (44) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    BITAND          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    BITXOR          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    BITOR           reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 44 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 44 (expression -> LPAREN expression RPAREN .)


state 96

    (48) expression -> NAME DOT NAME .

    THEN            reduce using rule 48 (expression -> NAME DOT NAME .)
    IF              reduce using rule 48 (expression -> NAME DOT NAME .)
    LSHIFT          reduce using rule 48 (expression -> NAME DOT NAME .)
    RSHIFT          reduce using rule 48 (expression -> NAME DOT NAME .)
    BITAND          reduce using rule 48 (expression -> NAME DOT NAME .)
    BITXOR          reduce using rule 48 (expression -> NAME DOT NAME .)
    BITOR           reduce using rule 48 (expression -> NAME DOT NAME .)
    EXP             reduce using rule 48 (expression -> NAME DOT NAME .)
    MOD             reduce using rule 48 (expression -> NAME DOT NAME .)
    ADD             reduce using rule 48 (expression -> NAME DOT NAME .)
    SUB             reduce using rule 48 (expression -> NAME DOT NAME .)
    MUL             reduce using rule 48 (expression -> NAME DOT NAME .)
    DIV             reduce using rule 48 (expression -> NAME DOT NAME .)
    AND             reduce using rule 48 (expression -> NAME DOT NAME .)
    XOR             reduce using rule 48 (expression -> NAME DOT NAME .)
    NEQ             reduce using rule 48 (expression -> NAME DOT NAME .)
    GTE             reduce using rule 48 (expression -> NAME DOT NAME .)
    LTE             reduce using rule 48 (expression -> NAME DOT NAME .)
    EQ              reduce using rule 48 (expression -> NAME DOT NAME .)
    LT              reduce using rule 48 (expression -> NAME DOT NAME .)
    GT              reduce using rule 48 (expression -> NAME DOT NAME .)
    OR              reduce using rule 48 (expression -> NAME DOT NAME .)
    NEWLINE         reduce using rule 48 (expression -> NAME DOT NAME .)
    RPAREN          reduce using rule 48 (expression -> NAME DOT NAME .)
    COMMA           reduce using rule 48 (expression -> NAME DOT NAME .)
    ELSE            reduce using rule 48 (expression -> NAME DOT NAME .)


state 97

    (16) call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .

    TYPE            reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    MUT             reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    NAME            reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    FUNCNAME        reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    FOR             reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    IF              reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    $end            reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    NEWLINE         reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    END             reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    ELSE            reduce using rule 16 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)


state 98

    (21) arguments -> arguments COMMA expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

    RPAREN          reduce using rule 21 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 21 (arguments -> arguments COMMA expression .)
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61


state 99

    (17) for -> FOR NAME IN LPAREN arguments . RPAREN LOOP statements END LOOP NEWLINE
    (21) arguments -> arguments . COMMA expression

    RPAREN          shift and go to state 103
    COMMA           shift and go to state 71


state 100

    (23) expression -> expression IF expression ELSE . expression
    (23) expression -> . expression IF expression ELSE expression
    (24) expression -> . expression LSHIFT expression
    (25) expression -> . expression RSHIFT expression
    (26) expression -> . expression BITAND expression
    (27) expression -> . expression BITXOR expression
    (28) expression -> . expression BITOR expression
    (29) expression -> . expression EXP expression
    (30) expression -> . expression MOD expression
    (31) expression -> . expression ADD expression
    (32) expression -> . expression SUB expression
    (33) expression -> . expression MUL expression
    (34) expression -> . expression DIV expression
    (35) expression -> . expression AND expression
    (36) expression -> . expression XOR expression
    (37) expression -> . expression NEQ expression
    (38) expression -> . expression GTE expression
    (39) expression -> . expression LTE expression
    (40) expression -> . expression EQ expression
    (41) expression -> . expression LT expression
    (42) expression -> . expression GT expression
    (43) expression -> . expression OR expression
    (44) expression -> . LPAREN expression RPAREN
    (45) expression -> . SUB expression
    (46) expression -> . INV expression
    (47) expression -> . NOT expression
    (48) expression -> . NAME DOT NAME
    (49) expression -> . NAME
    (50) expression -> . INT
    (51) expression -> . FLOAT
    (52) expression -> . SCI
    (53) expression -> . BOOL

    LPAREN          shift and go to state 24
    SUB             shift and go to state 23
    INV             shift and go to state 25
    NOT             shift and go to state 26
    NAME            shift and go to state 27
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    SCI             shift and go to state 30
    BOOL            shift and go to state 31

    expression                     shift and go to state 104

state 101

    (18) if -> IF expression THEN statements END . IF NEWLINE

    IF              shift and go to state 105


state 102

    (19) if -> IF expression THEN statements ELSE . statements END IF NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (2) empty -> .
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 106
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 103

    (17) for -> FOR NAME IN LPAREN arguments RPAREN . LOOP statements END LOOP NEWLINE

    LOOP            shift and go to state 107


state 104

    (23) expression -> expression IF expression ELSE expression .
    (23) expression -> expression . IF expression ELSE expression
    (24) expression -> expression . LSHIFT expression
    (25) expression -> expression . RSHIFT expression
    (26) expression -> expression . BITAND expression
    (27) expression -> expression . BITXOR expression
    (28) expression -> expression . BITOR expression
    (29) expression -> expression . EXP expression
    (30) expression -> expression . MOD expression
    (31) expression -> expression . ADD expression
    (32) expression -> expression . SUB expression
    (33) expression -> expression . MUL expression
    (34) expression -> expression . DIV expression
    (35) expression -> expression . AND expression
    (36) expression -> expression . XOR expression
    (37) expression -> expression . NEQ expression
    (38) expression -> expression . GTE expression
    (39) expression -> expression . LTE expression
    (40) expression -> expression . EQ expression
    (41) expression -> expression . LT expression
    (42) expression -> expression . GT expression
    (43) expression -> expression . OR expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
  ! shift/reduce conflict for BITXOR resolved as shift
  ! shift/reduce conflict for BITOR resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 23 (expression -> expression IF expression ELSE expression .)
    NEWLINE         reduce using rule 23 (expression -> expression IF expression ELSE expression .)
    RPAREN          reduce using rule 23 (expression -> expression IF expression ELSE expression .)
    COMMA           reduce using rule 23 (expression -> expression IF expression ELSE expression .)
    ELSE            reduce using rule 23 (expression -> expression IF expression ELSE expression .)
    IF              shift and go to state 40
    LSHIFT          shift and go to state 42
    RSHIFT          shift and go to state 43
    BITAND          shift and go to state 44
    BITXOR          shift and go to state 45
    BITOR           shift and go to state 46
    EXP             shift and go to state 47
    MOD             shift and go to state 48
    ADD             shift and go to state 49
    SUB             shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    AND             shift and go to state 53
    XOR             shift and go to state 54
    NEQ             shift and go to state 55
    GTE             shift and go to state 56
    LTE             shift and go to state 57
    EQ              shift and go to state 58
    LT              shift and go to state 59
    GT              shift and go to state 60
    OR              shift and go to state 61

  ! IF              [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! LSHIFT          [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! RSHIFT          [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! BITAND          [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! BITXOR          [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! BITOR           [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! EXP             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! MOD             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! ADD             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! SUB             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! MUL             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! DIV             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! AND             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! XOR             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! NEQ             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! GTE             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! LTE             [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! LT              [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]
  ! OR              [ reduce using rule 23 (expression -> expression IF expression ELSE expression .) ]


state 105

    (18) if -> IF expression THEN statements END IF . NEWLINE

    NEWLINE         shift and go to state 108


state 106

    (19) if -> IF expression THEN statements ELSE statements . END IF NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

    END             shift and go to state 109
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 16
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 107

    (17) for -> FOR NAME IN LPAREN arguments RPAREN LOOP . statements END LOOP NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (2) empty -> .
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 110
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 108

    (18) if -> IF expression THEN statements END IF NEWLINE .

    TYPE            reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    MUT             reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    NAME            reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    FUNCNAME        reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    FOR             reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    IF              reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    $end            reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    END             reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)
    ELSE            reduce using rule 18 (if -> IF expression THEN statements END IF NEWLINE .)


state 109

    (19) if -> IF expression THEN statements ELSE statements END . IF NEWLINE

    IF              shift and go to state 111


state 110

    (17) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements . END LOOP NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) declaration -> . TYPE assignment
    (12) declaration -> . MUT TYPE NAME NEWLINE
    (13) declaration -> . MUT TYPE assignment
    (14) assignment -> . NAME ASSIGN expression NEWLINE
    (15) assignment -> . NAME ASSIGN call NEWLINE
    (16) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (17) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (18) if -> . IF expression THEN statements END IF NEWLINE
    (19) if -> . IF expression THEN statements ELSE statements END IF NEWLINE

    END             shift and go to state 112
    TYPE            shift and go to state 10
    MUT             shift and go to state 11
    NAME            shift and go to state 12
    FUNCNAME        shift and go to state 13
    FOR             shift and go to state 14
    IF              shift and go to state 15

    statement                      shift and go to state 16
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9

state 111

    (19) if -> IF expression THEN statements ELSE statements END IF . NEWLINE

    NEWLINE         shift and go to state 113


state 112

    (17) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END . LOOP NEWLINE

    LOOP            shift and go to state 114


state 113

    (19) if -> IF expression THEN statements ELSE statements END IF NEWLINE .

    TYPE            reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    MUT             reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    NAME            reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    FUNCNAME        reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    FOR             reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    IF              reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    $end            reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    END             reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    ELSE            reduce using rule 19 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)


state 114

    (17) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP . NEWLINE

    NEWLINE         shift and go to state 115


state 115

    (17) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .

    TYPE            reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    MUT             reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    NAME            reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    FUNCNAME        reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    FOR             reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    IF              reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    $end            reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    END             reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    ELSE            reduce using rule 17 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for MUT in state 0 resolved as shift
WARNING: shift/reduce conflict for NAME in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 41 resolved as shift
WARNING: shift/reduce conflict for MUT in state 41 resolved as shift
WARNING: shift/reduce conflict for NAME in state 41 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 87 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 87 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 87 resolved as shift
WARNING: shift/reduce conflict for BITXOR in state 87 resolved as shift
WARNING: shift/reduce conflict for BITOR in state 87 resolved as shift
WARNING: shift/reduce conflict for EXP in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for ADD in state 87 resolved as shift
WARNING: shift/reduce conflict for SUB in state 87 resolved as shift
WARNING: shift/reduce conflict for MUL in state 87 resolved as shift
WARNING: shift/reduce conflict for DIV in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for XOR in state 87 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 87 resolved as shift
WARNING: shift/reduce conflict for GTE in state 87 resolved as shift
WARNING: shift/reduce conflict for LTE in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for LT in state 87 resolved as shift
WARNING: shift/reduce conflict for GT in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 102 resolved as shift
WARNING: shift/reduce conflict for MUT in state 102 resolved as shift
WARNING: shift/reduce conflict for NAME in state 102 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for IF in state 104 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 104 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 104 resolved as shift
WARNING: shift/reduce conflict for BITXOR in state 104 resolved as shift
WARNING: shift/reduce conflict for BITOR in state 104 resolved as shift
WARNING: shift/reduce conflict for EXP in state 104 resolved as shift
WARNING: shift/reduce conflict for MOD in state 104 resolved as shift
WARNING: shift/reduce conflict for ADD in state 104 resolved as shift
WARNING: shift/reduce conflict for SUB in state 104 resolved as shift
WARNING: shift/reduce conflict for MUL in state 104 resolved as shift
WARNING: shift/reduce conflict for DIV in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for XOR in state 104 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 104 resolved as shift
WARNING: shift/reduce conflict for GTE in state 104 resolved as shift
WARNING: shift/reduce conflict for LTE in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 107 resolved as shift
WARNING: shift/reduce conflict for MUT in state 107 resolved as shift
WARNING: shift/reduce conflict for NAME in state 107 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
