Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     empty -> <empty>
Rule 3     statements -> statement
Rule 4     statements -> statements statement
Rule 5     statements -> empty
Rule 6     statement -> declaration
Rule 7     statement -> assignment
Rule 8     statement -> call
Rule 9     statement -> for
Rule 10    statement -> if
Rule 11    statement -> wait NEWLINE
Rule 12    statement -> return
Rule 13    return -> RETURN
Rule 14    return -> RETURN LPAREN arguments RPAREN
Rule 15    declaration -> TYPE assignment
Rule 16    declaration -> MUT TYPE NAME NEWLINE
Rule 17    declaration -> MUT TYPE assignment
Rule 18    assignment -> NAME ASSIGN expression NEWLINE
Rule 19    assignment -> NAME ASSIGN call
Rule 20    call -> FUNCNAME LPAREN arguments RPAREN NEWLINE
Rule 21    call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
Rule 22    for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
Rule 23    if -> IF expression THEN statements END IF NEWLINE
Rule 24    if -> IF expression THEN statements ELSE statements END IF NEWLINE
Rule 25    arguments -> expression
Rule 26    arguments -> arguments COMMA expression
Rule 27    arguments -> arguments COMMA wait
Rule 28    arguments -> empty
Rule 29    wait -> WAIT WAITTYPE expression
Rule 30    timeout -> TIMEOUT WAITTYPE expression
Rule 31    expression -> expression IF expression ELSE expression
Rule 32    expression -> expression LSHIFT expression
Rule 33    expression -> expression RSHIFT expression
Rule 34    expression -> expression BITAND expression
Rule 35    expression -> expression BITXOR expression
Rule 36    expression -> expression BITOR expression
Rule 37    expression -> expression EXP expression
Rule 38    expression -> expression MOD expression
Rule 39    expression -> expression ADD expression
Rule 40    expression -> expression SUB expression
Rule 41    expression -> expression MUL expression
Rule 42    expression -> expression DIV expression
Rule 43    expression -> expression AND expression
Rule 44    expression -> expression XOR expression
Rule 45    expression -> expression NEQ expression
Rule 46    expression -> expression GTE expression
Rule 47    expression -> expression LTE expression
Rule 48    expression -> expression EQ expression
Rule 49    expression -> expression LT expression
Rule 50    expression -> expression GT expression
Rule 51    expression -> expression OR expression
Rule 52    expression -> LPAREN expression RPAREN
Rule 53    expression -> TYPE LPAREN expression RPAREN
Rule 54    expression -> SUB expression
Rule 55    expression -> INV expression
Rule 56    expression -> NOT expression
Rule 57    expression -> TIMEOUT
Rule 58    expression -> NAME
Rule 59    expression -> INT
Rule 60    expression -> FLOAT
Rule 61    expression -> TRUE
Rule 62    expression -> FALSE
Rule 63    expression -> UINT

Terminals, with rules where they appear

ADD                  : 39
AND                  : 43
ASSIGN               : 18 19
BITAND               : 34
BITOR                : 36
BITXOR               : 35
COMMA                : 26 27
DIV                  : 42
DOT                  : 
ELSE                 : 24 31
END                  : 22 23 24
EQ                   : 48
EXP                  : 37
FALSE                : 62
FLOAT                : 60
FOR                  : 22
FUNCNAME             : 20 21
GT                   : 50
GTE                  : 46
IF                   : 23 23 24 24 31
IN                   : 22
INT                  : 59
INV                  : 55
LOOP                 : 22 22
LPAREN               : 14 20 21 22 52 53
LSHIFT               : 32
LT                   : 49
LTE                  : 47
MOD                  : 38
MUL                  : 41
MUT                  : 16 17
NAME                 : 16 18 19 22 58
NEQ                  : 45
NEWLINE              : 11 16 18 20 21 22 23 24
NOT                  : 56
OR                   : 51
RETURN               : 13 14
RPAREN               : 14 20 21 22 52 53
RSHIFT               : 33
SUB                  : 40 54
THEN                 : 23 24
TIMEOUT              : 30 57
TRUE                 : 61
TYPE                 : 15 16 17 53
UINT                 : 63
WAIT                 : 29
WAITTYPE             : 29 30
WITH                 : 21
XOR                  : 44
error                : 

Nonterminals, with rules where they appear

arguments            : 14 20 21 22 26 27
assignment           : 7 15 17
call                 : 8 19
declaration          : 6
empty                : 5 28
expression           : 18 23 24 25 26 29 30 31 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 53 54 55 56
for                  : 9
if                   : 10
program              : 0
return               : 12
statement            : 3 4
statements           : 1 4 22 23 24 24
timeout              : 21
wait                 : 11 27

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (2) empty -> .
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WAIT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WAIT            [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

    $end            reduce using rule 1 (program -> statements .)
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 3

    (3) statements -> statement .

    TYPE            reduce using rule 3 (statements -> statement .)
    MUT             reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    FUNCNAME        reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WAIT            reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    END             reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)


state 4

    (5) statements -> empty .

    TYPE            reduce using rule 5 (statements -> empty .)
    MUT             reduce using rule 5 (statements -> empty .)
    NAME            reduce using rule 5 (statements -> empty .)
    FUNCNAME        reduce using rule 5 (statements -> empty .)
    FOR             reduce using rule 5 (statements -> empty .)
    IF              reduce using rule 5 (statements -> empty .)
    WAIT            reduce using rule 5 (statements -> empty .)
    RETURN          reduce using rule 5 (statements -> empty .)
    $end            reduce using rule 5 (statements -> empty .)
    END             reduce using rule 5 (statements -> empty .)
    ELSE            reduce using rule 5 (statements -> empty .)


state 5

    (6) statement -> declaration .

    TYPE            reduce using rule 6 (statement -> declaration .)
    MUT             reduce using rule 6 (statement -> declaration .)
    NAME            reduce using rule 6 (statement -> declaration .)
    FUNCNAME        reduce using rule 6 (statement -> declaration .)
    FOR             reduce using rule 6 (statement -> declaration .)
    IF              reduce using rule 6 (statement -> declaration .)
    WAIT            reduce using rule 6 (statement -> declaration .)
    RETURN          reduce using rule 6 (statement -> declaration .)
    $end            reduce using rule 6 (statement -> declaration .)
    END             reduce using rule 6 (statement -> declaration .)
    ELSE            reduce using rule 6 (statement -> declaration .)


state 6

    (7) statement -> assignment .

    TYPE            reduce using rule 7 (statement -> assignment .)
    MUT             reduce using rule 7 (statement -> assignment .)
    NAME            reduce using rule 7 (statement -> assignment .)
    FUNCNAME        reduce using rule 7 (statement -> assignment .)
    FOR             reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    WAIT            reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    END             reduce using rule 7 (statement -> assignment .)
    ELSE            reduce using rule 7 (statement -> assignment .)


state 7

    (8) statement -> call .

    TYPE            reduce using rule 8 (statement -> call .)
    MUT             reduce using rule 8 (statement -> call .)
    NAME            reduce using rule 8 (statement -> call .)
    FUNCNAME        reduce using rule 8 (statement -> call .)
    FOR             reduce using rule 8 (statement -> call .)
    IF              reduce using rule 8 (statement -> call .)
    WAIT            reduce using rule 8 (statement -> call .)
    RETURN          reduce using rule 8 (statement -> call .)
    $end            reduce using rule 8 (statement -> call .)
    END             reduce using rule 8 (statement -> call .)
    ELSE            reduce using rule 8 (statement -> call .)


state 8

    (9) statement -> for .

    TYPE            reduce using rule 9 (statement -> for .)
    MUT             reduce using rule 9 (statement -> for .)
    NAME            reduce using rule 9 (statement -> for .)
    FUNCNAME        reduce using rule 9 (statement -> for .)
    FOR             reduce using rule 9 (statement -> for .)
    IF              reduce using rule 9 (statement -> for .)
    WAIT            reduce using rule 9 (statement -> for .)
    RETURN          reduce using rule 9 (statement -> for .)
    $end            reduce using rule 9 (statement -> for .)
    END             reduce using rule 9 (statement -> for .)
    ELSE            reduce using rule 9 (statement -> for .)


state 9

    (10) statement -> if .

    TYPE            reduce using rule 10 (statement -> if .)
    MUT             reduce using rule 10 (statement -> if .)
    NAME            reduce using rule 10 (statement -> if .)
    FUNCNAME        reduce using rule 10 (statement -> if .)
    FOR             reduce using rule 10 (statement -> if .)
    IF              reduce using rule 10 (statement -> if .)
    WAIT            reduce using rule 10 (statement -> if .)
    RETURN          reduce using rule 10 (statement -> if .)
    $end            reduce using rule 10 (statement -> if .)
    END             reduce using rule 10 (statement -> if .)
    ELSE            reduce using rule 10 (statement -> if .)


state 10

    (11) statement -> wait . NEWLINE

    NEWLINE         shift and go to state 21


state 11

    (12) statement -> return .

    TYPE            reduce using rule 12 (statement -> return .)
    MUT             reduce using rule 12 (statement -> return .)
    NAME            reduce using rule 12 (statement -> return .)
    FUNCNAME        reduce using rule 12 (statement -> return .)
    FOR             reduce using rule 12 (statement -> return .)
    IF              reduce using rule 12 (statement -> return .)
    WAIT            reduce using rule 12 (statement -> return .)
    RETURN          reduce using rule 12 (statement -> return .)
    $end            reduce using rule 12 (statement -> return .)
    END             reduce using rule 12 (statement -> return .)
    ELSE            reduce using rule 12 (statement -> return .)


state 12

    (15) declaration -> TYPE . assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call

    NAME            shift and go to state 14

    assignment                     shift and go to state 22

state 13

    (16) declaration -> MUT . TYPE NAME NEWLINE
    (17) declaration -> MUT . TYPE assignment

    TYPE            shift and go to state 23


state 14

    (18) assignment -> NAME . ASSIGN expression NEWLINE
    (19) assignment -> NAME . ASSIGN call

    ASSIGN          shift and go to state 24


state 15

    (20) call -> FUNCNAME . LPAREN arguments RPAREN NEWLINE
    (21) call -> FUNCNAME . LPAREN arguments RPAREN WITH timeout NEWLINE

    LPAREN          shift and go to state 25


state 16

    (22) for -> FOR . NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    NAME            shift and go to state 26


state 17

    (23) if -> IF . expression THEN statements END IF NEWLINE
    (24) if -> IF . expression THEN statements ELSE statements END IF NEWLINE
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 27

state 18

    (29) wait -> WAIT . WAITTYPE expression

    WAITTYPE        shift and go to state 40


state 19

    (13) return -> RETURN .
    (14) return -> RETURN . LPAREN arguments RPAREN

    TYPE            reduce using rule 13 (return -> RETURN .)
    MUT             reduce using rule 13 (return -> RETURN .)
    NAME            reduce using rule 13 (return -> RETURN .)
    FUNCNAME        reduce using rule 13 (return -> RETURN .)
    FOR             reduce using rule 13 (return -> RETURN .)
    IF              reduce using rule 13 (return -> RETURN .)
    WAIT            reduce using rule 13 (return -> RETURN .)
    RETURN          reduce using rule 13 (return -> RETURN .)
    $end            reduce using rule 13 (return -> RETURN .)
    END             reduce using rule 13 (return -> RETURN .)
    ELSE            reduce using rule 13 (return -> RETURN .)
    LPAREN          shift and go to state 41


state 20

    (4) statements -> statements statement .

    TYPE            reduce using rule 4 (statements -> statements statement .)
    MUT             reduce using rule 4 (statements -> statements statement .)
    NAME            reduce using rule 4 (statements -> statements statement .)
    FUNCNAME        reduce using rule 4 (statements -> statements statement .)
    FOR             reduce using rule 4 (statements -> statements statement .)
    IF              reduce using rule 4 (statements -> statements statement .)
    WAIT            reduce using rule 4 (statements -> statements statement .)
    RETURN          reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    END             reduce using rule 4 (statements -> statements statement .)
    ELSE            reduce using rule 4 (statements -> statements statement .)


state 21

    (11) statement -> wait NEWLINE .

    TYPE            reduce using rule 11 (statement -> wait NEWLINE .)
    MUT             reduce using rule 11 (statement -> wait NEWLINE .)
    NAME            reduce using rule 11 (statement -> wait NEWLINE .)
    FUNCNAME        reduce using rule 11 (statement -> wait NEWLINE .)
    FOR             reduce using rule 11 (statement -> wait NEWLINE .)
    IF              reduce using rule 11 (statement -> wait NEWLINE .)
    WAIT            reduce using rule 11 (statement -> wait NEWLINE .)
    RETURN          reduce using rule 11 (statement -> wait NEWLINE .)
    $end            reduce using rule 11 (statement -> wait NEWLINE .)
    END             reduce using rule 11 (statement -> wait NEWLINE .)
    ELSE            reduce using rule 11 (statement -> wait NEWLINE .)


state 22

    (15) declaration -> TYPE assignment .

    TYPE            reduce using rule 15 (declaration -> TYPE assignment .)
    MUT             reduce using rule 15 (declaration -> TYPE assignment .)
    NAME            reduce using rule 15 (declaration -> TYPE assignment .)
    FUNCNAME        reduce using rule 15 (declaration -> TYPE assignment .)
    FOR             reduce using rule 15 (declaration -> TYPE assignment .)
    IF              reduce using rule 15 (declaration -> TYPE assignment .)
    WAIT            reduce using rule 15 (declaration -> TYPE assignment .)
    RETURN          reduce using rule 15 (declaration -> TYPE assignment .)
    $end            reduce using rule 15 (declaration -> TYPE assignment .)
    END             reduce using rule 15 (declaration -> TYPE assignment .)
    ELSE            reduce using rule 15 (declaration -> TYPE assignment .)


state 23

    (16) declaration -> MUT TYPE . NAME NEWLINE
    (17) declaration -> MUT TYPE . assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call

    NAME            shift and go to state 42

    assignment                     shift and go to state 43

state 24

    (18) assignment -> NAME ASSIGN . expression NEWLINE
    (19) assignment -> NAME ASSIGN . call
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39
    FUNCNAME        shift and go to state 15

    expression                     shift and go to state 44
    call                           shift and go to state 45

state 25

    (20) call -> FUNCNAME LPAREN . arguments RPAREN NEWLINE
    (21) call -> FUNCNAME LPAREN . arguments RPAREN WITH timeout NEWLINE
    (25) arguments -> . expression
    (26) arguments -> . arguments COMMA expression
    (27) arguments -> . arguments COMMA wait
    (28) arguments -> . empty
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT
    (2) empty -> .

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    arguments                      shift and go to state 46
    expression                     shift and go to state 47
    empty                          shift and go to state 48

state 26

    (22) for -> FOR NAME . IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    IN              shift and go to state 49


state 27

    (23) if -> IF expression . THEN statements END IF NEWLINE
    (24) if -> IF expression . THEN statements ELSE statements END IF NEWLINE
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            shift and go to state 51
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 28

    (54) expression -> SUB . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 72

state 29

    (52) expression -> LPAREN . expression RPAREN
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 73

state 30

    (53) expression -> TYPE . LPAREN expression RPAREN

    LPAREN          shift and go to state 74


state 31

    (55) expression -> INV . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 75

state 32

    (56) expression -> NOT . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 76

state 33

    (57) expression -> TIMEOUT .

    THEN            reduce using rule 57 (expression -> TIMEOUT .)
    IF              reduce using rule 57 (expression -> TIMEOUT .)
    LSHIFT          reduce using rule 57 (expression -> TIMEOUT .)
    RSHIFT          reduce using rule 57 (expression -> TIMEOUT .)
    BITAND          reduce using rule 57 (expression -> TIMEOUT .)
    BITXOR          reduce using rule 57 (expression -> TIMEOUT .)
    BITOR           reduce using rule 57 (expression -> TIMEOUT .)
    EXP             reduce using rule 57 (expression -> TIMEOUT .)
    MOD             reduce using rule 57 (expression -> TIMEOUT .)
    ADD             reduce using rule 57 (expression -> TIMEOUT .)
    SUB             reduce using rule 57 (expression -> TIMEOUT .)
    MUL             reduce using rule 57 (expression -> TIMEOUT .)
    DIV             reduce using rule 57 (expression -> TIMEOUT .)
    AND             reduce using rule 57 (expression -> TIMEOUT .)
    XOR             reduce using rule 57 (expression -> TIMEOUT .)
    NEQ             reduce using rule 57 (expression -> TIMEOUT .)
    GTE             reduce using rule 57 (expression -> TIMEOUT .)
    LTE             reduce using rule 57 (expression -> TIMEOUT .)
    EQ              reduce using rule 57 (expression -> TIMEOUT .)
    LT              reduce using rule 57 (expression -> TIMEOUT .)
    GT              reduce using rule 57 (expression -> TIMEOUT .)
    OR              reduce using rule 57 (expression -> TIMEOUT .)
    NEWLINE         reduce using rule 57 (expression -> TIMEOUT .)
    RPAREN          reduce using rule 57 (expression -> TIMEOUT .)
    COMMA           reduce using rule 57 (expression -> TIMEOUT .)
    ELSE            reduce using rule 57 (expression -> TIMEOUT .)


state 34

    (58) expression -> NAME .

    THEN            reduce using rule 58 (expression -> NAME .)
    IF              reduce using rule 58 (expression -> NAME .)
    LSHIFT          reduce using rule 58 (expression -> NAME .)
    RSHIFT          reduce using rule 58 (expression -> NAME .)
    BITAND          reduce using rule 58 (expression -> NAME .)
    BITXOR          reduce using rule 58 (expression -> NAME .)
    BITOR           reduce using rule 58 (expression -> NAME .)
    EXP             reduce using rule 58 (expression -> NAME .)
    MOD             reduce using rule 58 (expression -> NAME .)
    ADD             reduce using rule 58 (expression -> NAME .)
    SUB             reduce using rule 58 (expression -> NAME .)
    MUL             reduce using rule 58 (expression -> NAME .)
    DIV             reduce using rule 58 (expression -> NAME .)
    AND             reduce using rule 58 (expression -> NAME .)
    XOR             reduce using rule 58 (expression -> NAME .)
    NEQ             reduce using rule 58 (expression -> NAME .)
    GTE             reduce using rule 58 (expression -> NAME .)
    LTE             reduce using rule 58 (expression -> NAME .)
    EQ              reduce using rule 58 (expression -> NAME .)
    LT              reduce using rule 58 (expression -> NAME .)
    GT              reduce using rule 58 (expression -> NAME .)
    OR              reduce using rule 58 (expression -> NAME .)
    NEWLINE         reduce using rule 58 (expression -> NAME .)
    RPAREN          reduce using rule 58 (expression -> NAME .)
    COMMA           reduce using rule 58 (expression -> NAME .)
    ELSE            reduce using rule 58 (expression -> NAME .)


state 35

    (59) expression -> INT .

    THEN            reduce using rule 59 (expression -> INT .)
    IF              reduce using rule 59 (expression -> INT .)
    LSHIFT          reduce using rule 59 (expression -> INT .)
    RSHIFT          reduce using rule 59 (expression -> INT .)
    BITAND          reduce using rule 59 (expression -> INT .)
    BITXOR          reduce using rule 59 (expression -> INT .)
    BITOR           reduce using rule 59 (expression -> INT .)
    EXP             reduce using rule 59 (expression -> INT .)
    MOD             reduce using rule 59 (expression -> INT .)
    ADD             reduce using rule 59 (expression -> INT .)
    SUB             reduce using rule 59 (expression -> INT .)
    MUL             reduce using rule 59 (expression -> INT .)
    DIV             reduce using rule 59 (expression -> INT .)
    AND             reduce using rule 59 (expression -> INT .)
    XOR             reduce using rule 59 (expression -> INT .)
    NEQ             reduce using rule 59 (expression -> INT .)
    GTE             reduce using rule 59 (expression -> INT .)
    LTE             reduce using rule 59 (expression -> INT .)
    EQ              reduce using rule 59 (expression -> INT .)
    LT              reduce using rule 59 (expression -> INT .)
    GT              reduce using rule 59 (expression -> INT .)
    OR              reduce using rule 59 (expression -> INT .)
    NEWLINE         reduce using rule 59 (expression -> INT .)
    RPAREN          reduce using rule 59 (expression -> INT .)
    COMMA           reduce using rule 59 (expression -> INT .)
    ELSE            reduce using rule 59 (expression -> INT .)


state 36

    (60) expression -> FLOAT .

    THEN            reduce using rule 60 (expression -> FLOAT .)
    IF              reduce using rule 60 (expression -> FLOAT .)
    LSHIFT          reduce using rule 60 (expression -> FLOAT .)
    RSHIFT          reduce using rule 60 (expression -> FLOAT .)
    BITAND          reduce using rule 60 (expression -> FLOAT .)
    BITXOR          reduce using rule 60 (expression -> FLOAT .)
    BITOR           reduce using rule 60 (expression -> FLOAT .)
    EXP             reduce using rule 60 (expression -> FLOAT .)
    MOD             reduce using rule 60 (expression -> FLOAT .)
    ADD             reduce using rule 60 (expression -> FLOAT .)
    SUB             reduce using rule 60 (expression -> FLOAT .)
    MUL             reduce using rule 60 (expression -> FLOAT .)
    DIV             reduce using rule 60 (expression -> FLOAT .)
    AND             reduce using rule 60 (expression -> FLOAT .)
    XOR             reduce using rule 60 (expression -> FLOAT .)
    NEQ             reduce using rule 60 (expression -> FLOAT .)
    GTE             reduce using rule 60 (expression -> FLOAT .)
    LTE             reduce using rule 60 (expression -> FLOAT .)
    EQ              reduce using rule 60 (expression -> FLOAT .)
    LT              reduce using rule 60 (expression -> FLOAT .)
    GT              reduce using rule 60 (expression -> FLOAT .)
    OR              reduce using rule 60 (expression -> FLOAT .)
    NEWLINE         reduce using rule 60 (expression -> FLOAT .)
    RPAREN          reduce using rule 60 (expression -> FLOAT .)
    COMMA           reduce using rule 60 (expression -> FLOAT .)
    ELSE            reduce using rule 60 (expression -> FLOAT .)


state 37

    (61) expression -> TRUE .

    THEN            reduce using rule 61 (expression -> TRUE .)
    IF              reduce using rule 61 (expression -> TRUE .)
    LSHIFT          reduce using rule 61 (expression -> TRUE .)
    RSHIFT          reduce using rule 61 (expression -> TRUE .)
    BITAND          reduce using rule 61 (expression -> TRUE .)
    BITXOR          reduce using rule 61 (expression -> TRUE .)
    BITOR           reduce using rule 61 (expression -> TRUE .)
    EXP             reduce using rule 61 (expression -> TRUE .)
    MOD             reduce using rule 61 (expression -> TRUE .)
    ADD             reduce using rule 61 (expression -> TRUE .)
    SUB             reduce using rule 61 (expression -> TRUE .)
    MUL             reduce using rule 61 (expression -> TRUE .)
    DIV             reduce using rule 61 (expression -> TRUE .)
    AND             reduce using rule 61 (expression -> TRUE .)
    XOR             reduce using rule 61 (expression -> TRUE .)
    NEQ             reduce using rule 61 (expression -> TRUE .)
    GTE             reduce using rule 61 (expression -> TRUE .)
    LTE             reduce using rule 61 (expression -> TRUE .)
    EQ              reduce using rule 61 (expression -> TRUE .)
    LT              reduce using rule 61 (expression -> TRUE .)
    GT              reduce using rule 61 (expression -> TRUE .)
    OR              reduce using rule 61 (expression -> TRUE .)
    NEWLINE         reduce using rule 61 (expression -> TRUE .)
    RPAREN          reduce using rule 61 (expression -> TRUE .)
    COMMA           reduce using rule 61 (expression -> TRUE .)
    ELSE            reduce using rule 61 (expression -> TRUE .)


state 38

    (62) expression -> FALSE .

    THEN            reduce using rule 62 (expression -> FALSE .)
    IF              reduce using rule 62 (expression -> FALSE .)
    LSHIFT          reduce using rule 62 (expression -> FALSE .)
    RSHIFT          reduce using rule 62 (expression -> FALSE .)
    BITAND          reduce using rule 62 (expression -> FALSE .)
    BITXOR          reduce using rule 62 (expression -> FALSE .)
    BITOR           reduce using rule 62 (expression -> FALSE .)
    EXP             reduce using rule 62 (expression -> FALSE .)
    MOD             reduce using rule 62 (expression -> FALSE .)
    ADD             reduce using rule 62 (expression -> FALSE .)
    SUB             reduce using rule 62 (expression -> FALSE .)
    MUL             reduce using rule 62 (expression -> FALSE .)
    DIV             reduce using rule 62 (expression -> FALSE .)
    AND             reduce using rule 62 (expression -> FALSE .)
    XOR             reduce using rule 62 (expression -> FALSE .)
    NEQ             reduce using rule 62 (expression -> FALSE .)
    GTE             reduce using rule 62 (expression -> FALSE .)
    LTE             reduce using rule 62 (expression -> FALSE .)
    EQ              reduce using rule 62 (expression -> FALSE .)
    LT              reduce using rule 62 (expression -> FALSE .)
    GT              reduce using rule 62 (expression -> FALSE .)
    OR              reduce using rule 62 (expression -> FALSE .)
    NEWLINE         reduce using rule 62 (expression -> FALSE .)
    RPAREN          reduce using rule 62 (expression -> FALSE .)
    COMMA           reduce using rule 62 (expression -> FALSE .)
    ELSE            reduce using rule 62 (expression -> FALSE .)


state 39

    (63) expression -> UINT .

    THEN            reduce using rule 63 (expression -> UINT .)
    IF              reduce using rule 63 (expression -> UINT .)
    LSHIFT          reduce using rule 63 (expression -> UINT .)
    RSHIFT          reduce using rule 63 (expression -> UINT .)
    BITAND          reduce using rule 63 (expression -> UINT .)
    BITXOR          reduce using rule 63 (expression -> UINT .)
    BITOR           reduce using rule 63 (expression -> UINT .)
    EXP             reduce using rule 63 (expression -> UINT .)
    MOD             reduce using rule 63 (expression -> UINT .)
    ADD             reduce using rule 63 (expression -> UINT .)
    SUB             reduce using rule 63 (expression -> UINT .)
    MUL             reduce using rule 63 (expression -> UINT .)
    DIV             reduce using rule 63 (expression -> UINT .)
    AND             reduce using rule 63 (expression -> UINT .)
    XOR             reduce using rule 63 (expression -> UINT .)
    NEQ             reduce using rule 63 (expression -> UINT .)
    GTE             reduce using rule 63 (expression -> UINT .)
    LTE             reduce using rule 63 (expression -> UINT .)
    EQ              reduce using rule 63 (expression -> UINT .)
    LT              reduce using rule 63 (expression -> UINT .)
    GT              reduce using rule 63 (expression -> UINT .)
    OR              reduce using rule 63 (expression -> UINT .)
    NEWLINE         reduce using rule 63 (expression -> UINT .)
    RPAREN          reduce using rule 63 (expression -> UINT .)
    COMMA           reduce using rule 63 (expression -> UINT .)
    ELSE            reduce using rule 63 (expression -> UINT .)


state 40

    (29) wait -> WAIT WAITTYPE . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 77

state 41

    (14) return -> RETURN LPAREN . arguments RPAREN
    (25) arguments -> . expression
    (26) arguments -> . arguments COMMA expression
    (27) arguments -> . arguments COMMA wait
    (28) arguments -> . empty
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT
    (2) empty -> .

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    arguments                      shift and go to state 78
    expression                     shift and go to state 47
    empty                          shift and go to state 48

state 42

    (16) declaration -> MUT TYPE NAME . NEWLINE
    (18) assignment -> NAME . ASSIGN expression NEWLINE
    (19) assignment -> NAME . ASSIGN call

    NEWLINE         shift and go to state 79
    ASSIGN          shift and go to state 24


state 43

    (17) declaration -> MUT TYPE assignment .

    TYPE            reduce using rule 17 (declaration -> MUT TYPE assignment .)
    MUT             reduce using rule 17 (declaration -> MUT TYPE assignment .)
    NAME            reduce using rule 17 (declaration -> MUT TYPE assignment .)
    FUNCNAME        reduce using rule 17 (declaration -> MUT TYPE assignment .)
    FOR             reduce using rule 17 (declaration -> MUT TYPE assignment .)
    IF              reduce using rule 17 (declaration -> MUT TYPE assignment .)
    WAIT            reduce using rule 17 (declaration -> MUT TYPE assignment .)
    RETURN          reduce using rule 17 (declaration -> MUT TYPE assignment .)
    $end            reduce using rule 17 (declaration -> MUT TYPE assignment .)
    END             reduce using rule 17 (declaration -> MUT TYPE assignment .)
    ELSE            reduce using rule 17 (declaration -> MUT TYPE assignment .)


state 44

    (18) assignment -> NAME ASSIGN expression . NEWLINE
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    NEWLINE         shift and go to state 80
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 45

    (19) assignment -> NAME ASSIGN call .

    TYPE            reduce using rule 19 (assignment -> NAME ASSIGN call .)
    MUT             reduce using rule 19 (assignment -> NAME ASSIGN call .)
    NAME            reduce using rule 19 (assignment -> NAME ASSIGN call .)
    FUNCNAME        reduce using rule 19 (assignment -> NAME ASSIGN call .)
    FOR             reduce using rule 19 (assignment -> NAME ASSIGN call .)
    IF              reduce using rule 19 (assignment -> NAME ASSIGN call .)
    WAIT            reduce using rule 19 (assignment -> NAME ASSIGN call .)
    RETURN          reduce using rule 19 (assignment -> NAME ASSIGN call .)
    $end            reduce using rule 19 (assignment -> NAME ASSIGN call .)
    END             reduce using rule 19 (assignment -> NAME ASSIGN call .)
    ELSE            reduce using rule 19 (assignment -> NAME ASSIGN call .)


state 46

    (20) call -> FUNCNAME LPAREN arguments . RPAREN NEWLINE
    (21) call -> FUNCNAME LPAREN arguments . RPAREN WITH timeout NEWLINE
    (26) arguments -> arguments . COMMA expression
    (27) arguments -> arguments . COMMA wait

    RPAREN          shift and go to state 81
    COMMA           shift and go to state 82


state 47

    (25) arguments -> expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    RPAREN          reduce using rule 25 (arguments -> expression .)
    COMMA           reduce using rule 25 (arguments -> expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 48

    (28) arguments -> empty .

    RPAREN          reduce using rule 28 (arguments -> empty .)
    COMMA           reduce using rule 28 (arguments -> empty .)


state 49

    (22) for -> FOR NAME IN . LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE

    LPAREN          shift and go to state 83


state 50

    (31) expression -> expression IF . expression ELSE expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 84

state 51

    (23) if -> IF expression THEN . statements END IF NEWLINE
    (24) if -> IF expression THEN . statements ELSE statements END IF NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (2) empty -> .
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WAIT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    END             reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WAIT            [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 85
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 52

    (32) expression -> expression LSHIFT . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 86

state 53

    (33) expression -> expression RSHIFT . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 87

state 54

    (34) expression -> expression BITAND . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 88

state 55

    (35) expression -> expression BITXOR . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 89

state 56

    (36) expression -> expression BITOR . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 90

state 57

    (37) expression -> expression EXP . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 91

state 58

    (38) expression -> expression MOD . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 92

state 59

    (39) expression -> expression ADD . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 93

state 60

    (40) expression -> expression SUB . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 94

state 61

    (41) expression -> expression MUL . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 95

state 62

    (42) expression -> expression DIV . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 96

state 63

    (43) expression -> expression AND . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 97

state 64

    (44) expression -> expression XOR . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 98

state 65

    (45) expression -> expression NEQ . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 99

state 66

    (46) expression -> expression GTE . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 100

state 67

    (47) expression -> expression LTE . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 101

state 68

    (48) expression -> expression EQ . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 102

state 69

    (49) expression -> expression LT . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 103

state 70

    (50) expression -> expression GT . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 104

state 71

    (51) expression -> expression OR . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 105

state 72

    (54) expression -> SUB expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 54 (expression -> SUB expression .)
    IF              reduce using rule 54 (expression -> SUB expression .)
    LSHIFT          reduce using rule 54 (expression -> SUB expression .)
    RSHIFT          reduce using rule 54 (expression -> SUB expression .)
    BITAND          reduce using rule 54 (expression -> SUB expression .)
    BITXOR          reduce using rule 54 (expression -> SUB expression .)
    BITOR           reduce using rule 54 (expression -> SUB expression .)
    MOD             reduce using rule 54 (expression -> SUB expression .)
    ADD             reduce using rule 54 (expression -> SUB expression .)
    SUB             reduce using rule 54 (expression -> SUB expression .)
    MUL             reduce using rule 54 (expression -> SUB expression .)
    DIV             reduce using rule 54 (expression -> SUB expression .)
    AND             reduce using rule 54 (expression -> SUB expression .)
    XOR             reduce using rule 54 (expression -> SUB expression .)
    NEQ             reduce using rule 54 (expression -> SUB expression .)
    GTE             reduce using rule 54 (expression -> SUB expression .)
    LTE             reduce using rule 54 (expression -> SUB expression .)
    EQ              reduce using rule 54 (expression -> SUB expression .)
    LT              reduce using rule 54 (expression -> SUB expression .)
    GT              reduce using rule 54 (expression -> SUB expression .)
    OR              reduce using rule 54 (expression -> SUB expression .)
    NEWLINE         reduce using rule 54 (expression -> SUB expression .)
    RPAREN          reduce using rule 54 (expression -> SUB expression .)
    COMMA           reduce using rule 54 (expression -> SUB expression .)
    ELSE            reduce using rule 54 (expression -> SUB expression .)
    EXP             shift and go to state 57

  ! EXP             [ reduce using rule 54 (expression -> SUB expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 58 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 73

    (52) expression -> LPAREN expression . RPAREN
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 106
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 74

    (53) expression -> TYPE LPAREN . expression RPAREN
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 107

state 75

    (55) expression -> INV expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 55 (expression -> INV expression .)
    IF              reduce using rule 55 (expression -> INV expression .)
    LSHIFT          reduce using rule 55 (expression -> INV expression .)
    RSHIFT          reduce using rule 55 (expression -> INV expression .)
    BITAND          reduce using rule 55 (expression -> INV expression .)
    BITXOR          reduce using rule 55 (expression -> INV expression .)
    BITOR           reduce using rule 55 (expression -> INV expression .)
    AND             reduce using rule 55 (expression -> INV expression .)
    XOR             reduce using rule 55 (expression -> INV expression .)
    NEQ             reduce using rule 55 (expression -> INV expression .)
    GTE             reduce using rule 55 (expression -> INV expression .)
    LTE             reduce using rule 55 (expression -> INV expression .)
    EQ              reduce using rule 55 (expression -> INV expression .)
    LT              reduce using rule 55 (expression -> INV expression .)
    GT              reduce using rule 55 (expression -> INV expression .)
    OR              reduce using rule 55 (expression -> INV expression .)
    NEWLINE         reduce using rule 55 (expression -> INV expression .)
    RPAREN          reduce using rule 55 (expression -> INV expression .)
    COMMA           reduce using rule 55 (expression -> INV expression .)
    ELSE            reduce using rule 55 (expression -> INV expression .)
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! EXP             [ reduce using rule 55 (expression -> INV expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> INV expression .) ]
  ! ADD             [ reduce using rule 55 (expression -> INV expression .) ]
  ! SUB             [ reduce using rule 55 (expression -> INV expression .) ]
  ! MUL             [ reduce using rule 55 (expression -> INV expression .) ]
  ! DIV             [ reduce using rule 55 (expression -> INV expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 76

    (56) expression -> NOT expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 56 (expression -> NOT expression .)
    IF              reduce using rule 56 (expression -> NOT expression .)
    AND             reduce using rule 56 (expression -> NOT expression .)
    XOR             reduce using rule 56 (expression -> NOT expression .)
    OR              reduce using rule 56 (expression -> NOT expression .)
    NEWLINE         reduce using rule 56 (expression -> NOT expression .)
    RPAREN          reduce using rule 56 (expression -> NOT expression .)
    COMMA           reduce using rule 56 (expression -> NOT expression .)
    ELSE            reduce using rule 56 (expression -> NOT expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70

  ! LSHIFT          [ reduce using rule 56 (expression -> NOT expression .) ]
  ! RSHIFT          [ reduce using rule 56 (expression -> NOT expression .) ]
  ! BITAND          [ reduce using rule 56 (expression -> NOT expression .) ]
  ! BITXOR          [ reduce using rule 56 (expression -> NOT expression .) ]
  ! BITOR           [ reduce using rule 56 (expression -> NOT expression .) ]
  ! EXP             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! ADD             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! SUB             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! MUL             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! GTE             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! LTE             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 56 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 56 (expression -> NOT expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 71 ]


state 77

    (29) wait -> WAIT WAITTYPE expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    NEWLINE         reduce using rule 29 (wait -> WAIT WAITTYPE expression .)
    RPAREN          reduce using rule 29 (wait -> WAIT WAITTYPE expression .)
    COMMA           reduce using rule 29 (wait -> WAIT WAITTYPE expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 78

    (14) return -> RETURN LPAREN arguments . RPAREN
    (26) arguments -> arguments . COMMA expression
    (27) arguments -> arguments . COMMA wait

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 82


state 79

    (16) declaration -> MUT TYPE NAME NEWLINE .

    TYPE            reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    MUT             reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    NAME            reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    FUNCNAME        reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    FOR             reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    IF              reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    WAIT            reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    RETURN          reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    $end            reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    END             reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)
    ELSE            reduce using rule 16 (declaration -> MUT TYPE NAME NEWLINE .)


state 80

    (18) assignment -> NAME ASSIGN expression NEWLINE .

    TYPE            reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    MUT             reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    NAME            reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    FUNCNAME        reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    FOR             reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    IF              reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    WAIT            reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    RETURN          reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    $end            reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    END             reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)
    ELSE            reduce using rule 18 (assignment -> NAME ASSIGN expression NEWLINE .)


state 81

    (20) call -> FUNCNAME LPAREN arguments RPAREN . NEWLINE
    (21) call -> FUNCNAME LPAREN arguments RPAREN . WITH timeout NEWLINE

    NEWLINE         shift and go to state 109
    WITH            shift and go to state 110


state 82

    (26) arguments -> arguments COMMA . expression
    (27) arguments -> arguments COMMA . wait
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT
    (29) wait -> . WAIT WAITTYPE expression

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39
    WAIT            shift and go to state 18

    expression                     shift and go to state 111
    wait                           shift and go to state 112

state 83

    (22) for -> FOR NAME IN LPAREN . arguments RPAREN LOOP statements END LOOP NEWLINE
    (25) arguments -> . expression
    (26) arguments -> . arguments COMMA expression
    (27) arguments -> . arguments COMMA wait
    (28) arguments -> . empty
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT
    (2) empty -> .

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)

    arguments                      shift and go to state 113
    expression                     shift and go to state 47
    empty                          shift and go to state 48

state 84

    (31) expression -> expression IF expression . ELSE expression
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    ELSE            shift and go to state 114
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 85

    (23) if -> IF expression THEN statements . END IF NEWLINE
    (24) if -> IF expression THEN statements . ELSE statements END IF NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

    END             shift and go to state 115
    ELSE            shift and go to state 116
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 86

    (32) expression -> expression LSHIFT expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 32 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 32 (expression -> expression LSHIFT expression .)
    LSHIFT          reduce using rule 32 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 32 (expression -> expression LSHIFT expression .)
    BITAND          reduce using rule 32 (expression -> expression LSHIFT expression .)
    BITXOR          reduce using rule 32 (expression -> expression LSHIFT expression .)
    BITOR           reduce using rule 32 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 32 (expression -> expression LSHIFT expression .)
    XOR             reduce using rule 32 (expression -> expression LSHIFT expression .)
    NEQ             reduce using rule 32 (expression -> expression LSHIFT expression .)
    GTE             reduce using rule 32 (expression -> expression LSHIFT expression .)
    LTE             reduce using rule 32 (expression -> expression LSHIFT expression .)
    EQ              reduce using rule 32 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 32 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 32 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 32 (expression -> expression LSHIFT expression .)
    NEWLINE         reduce using rule 32 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 32 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 32 (expression -> expression LSHIFT expression .)
    ELSE            reduce using rule 32 (expression -> expression LSHIFT expression .)
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! EXP             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! ADD             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! SUB             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! MUL             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> expression LSHIFT expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 87

    (33) expression -> expression RSHIFT expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 33 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 33 (expression -> expression RSHIFT expression .)
    LSHIFT          reduce using rule 33 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 33 (expression -> expression RSHIFT expression .)
    BITAND          reduce using rule 33 (expression -> expression RSHIFT expression .)
    BITXOR          reduce using rule 33 (expression -> expression RSHIFT expression .)
    BITOR           reduce using rule 33 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 33 (expression -> expression RSHIFT expression .)
    XOR             reduce using rule 33 (expression -> expression RSHIFT expression .)
    NEQ             reduce using rule 33 (expression -> expression RSHIFT expression .)
    GTE             reduce using rule 33 (expression -> expression RSHIFT expression .)
    LTE             reduce using rule 33 (expression -> expression RSHIFT expression .)
    EQ              reduce using rule 33 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 33 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 33 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 33 (expression -> expression RSHIFT expression .)
    NEWLINE         reduce using rule 33 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 33 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 33 (expression -> expression RSHIFT expression .)
    ELSE            reduce using rule 33 (expression -> expression RSHIFT expression .)
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! EXP             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! ADD             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! SUB             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! MUL             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression RSHIFT expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 88

    (34) expression -> expression BITAND expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 34 (expression -> expression BITAND expression .)
    IF              reduce using rule 34 (expression -> expression BITAND expression .)
    BITAND          reduce using rule 34 (expression -> expression BITAND expression .)
    BITXOR          reduce using rule 34 (expression -> expression BITAND expression .)
    BITOR           reduce using rule 34 (expression -> expression BITAND expression .)
    AND             reduce using rule 34 (expression -> expression BITAND expression .)
    XOR             reduce using rule 34 (expression -> expression BITAND expression .)
    NEQ             reduce using rule 34 (expression -> expression BITAND expression .)
    GTE             reduce using rule 34 (expression -> expression BITAND expression .)
    LTE             reduce using rule 34 (expression -> expression BITAND expression .)
    EQ              reduce using rule 34 (expression -> expression BITAND expression .)
    LT              reduce using rule 34 (expression -> expression BITAND expression .)
    GT              reduce using rule 34 (expression -> expression BITAND expression .)
    OR              reduce using rule 34 (expression -> expression BITAND expression .)
    NEWLINE         reduce using rule 34 (expression -> expression BITAND expression .)
    RPAREN          reduce using rule 34 (expression -> expression BITAND expression .)
    COMMA           reduce using rule 34 (expression -> expression BITAND expression .)
    ELSE            reduce using rule 34 (expression -> expression BITAND expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! RSHIFT          [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! EXP             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! ADD             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! SUB             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! MUL             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression BITAND expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 89

    (35) expression -> expression BITXOR expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 35 (expression -> expression BITXOR expression .)
    IF              reduce using rule 35 (expression -> expression BITXOR expression .)
    BITXOR          reduce using rule 35 (expression -> expression BITXOR expression .)
    BITOR           reduce using rule 35 (expression -> expression BITXOR expression .)
    AND             reduce using rule 35 (expression -> expression BITXOR expression .)
    XOR             reduce using rule 35 (expression -> expression BITXOR expression .)
    NEQ             reduce using rule 35 (expression -> expression BITXOR expression .)
    GTE             reduce using rule 35 (expression -> expression BITXOR expression .)
    LTE             reduce using rule 35 (expression -> expression BITXOR expression .)
    EQ              reduce using rule 35 (expression -> expression BITXOR expression .)
    LT              reduce using rule 35 (expression -> expression BITXOR expression .)
    GT              reduce using rule 35 (expression -> expression BITXOR expression .)
    OR              reduce using rule 35 (expression -> expression BITXOR expression .)
    NEWLINE         reduce using rule 35 (expression -> expression BITXOR expression .)
    RPAREN          reduce using rule 35 (expression -> expression BITXOR expression .)
    COMMA           reduce using rule 35 (expression -> expression BITXOR expression .)
    ELSE            reduce using rule 35 (expression -> expression BITXOR expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! RSHIFT          [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! BITAND          [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! EXP             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! MOD             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! ADD             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! SUB             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! MUL             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> expression BITXOR expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 90

    (36) expression -> expression BITOR expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 36 (expression -> expression BITOR expression .)
    IF              reduce using rule 36 (expression -> expression BITOR expression .)
    BITOR           reduce using rule 36 (expression -> expression BITOR expression .)
    AND             reduce using rule 36 (expression -> expression BITOR expression .)
    XOR             reduce using rule 36 (expression -> expression BITOR expression .)
    NEQ             reduce using rule 36 (expression -> expression BITOR expression .)
    GTE             reduce using rule 36 (expression -> expression BITOR expression .)
    LTE             reduce using rule 36 (expression -> expression BITOR expression .)
    EQ              reduce using rule 36 (expression -> expression BITOR expression .)
    LT              reduce using rule 36 (expression -> expression BITOR expression .)
    GT              reduce using rule 36 (expression -> expression BITOR expression .)
    OR              reduce using rule 36 (expression -> expression BITOR expression .)
    NEWLINE         reduce using rule 36 (expression -> expression BITOR expression .)
    RPAREN          reduce using rule 36 (expression -> expression BITOR expression .)
    COMMA           reduce using rule 36 (expression -> expression BITOR expression .)
    ELSE            reduce using rule 36 (expression -> expression BITOR expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! RSHIFT          [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! BITAND          [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! BITXOR          [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! EXP             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! ADD             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! SUB             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! MUL             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> expression BITOR expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! BITOR           [ shift and go to state 56 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 91

    (37) expression -> expression EXP expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 37 (expression -> expression EXP expression .)
    IF              reduce using rule 37 (expression -> expression EXP expression .)
    LSHIFT          reduce using rule 37 (expression -> expression EXP expression .)
    RSHIFT          reduce using rule 37 (expression -> expression EXP expression .)
    BITAND          reduce using rule 37 (expression -> expression EXP expression .)
    BITXOR          reduce using rule 37 (expression -> expression EXP expression .)
    BITOR           reduce using rule 37 (expression -> expression EXP expression .)
    MOD             reduce using rule 37 (expression -> expression EXP expression .)
    ADD             reduce using rule 37 (expression -> expression EXP expression .)
    SUB             reduce using rule 37 (expression -> expression EXP expression .)
    MUL             reduce using rule 37 (expression -> expression EXP expression .)
    DIV             reduce using rule 37 (expression -> expression EXP expression .)
    AND             reduce using rule 37 (expression -> expression EXP expression .)
    XOR             reduce using rule 37 (expression -> expression EXP expression .)
    NEQ             reduce using rule 37 (expression -> expression EXP expression .)
    GTE             reduce using rule 37 (expression -> expression EXP expression .)
    LTE             reduce using rule 37 (expression -> expression EXP expression .)
    EQ              reduce using rule 37 (expression -> expression EXP expression .)
    LT              reduce using rule 37 (expression -> expression EXP expression .)
    GT              reduce using rule 37 (expression -> expression EXP expression .)
    OR              reduce using rule 37 (expression -> expression EXP expression .)
    NEWLINE         reduce using rule 37 (expression -> expression EXP expression .)
    RPAREN          reduce using rule 37 (expression -> expression EXP expression .)
    COMMA           reduce using rule 37 (expression -> expression EXP expression .)
    ELSE            reduce using rule 37 (expression -> expression EXP expression .)
    EXP             shift and go to state 57

  ! EXP             [ reduce using rule 37 (expression -> expression EXP expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 58 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 92

    (38) expression -> expression MOD expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 38 (expression -> expression MOD expression .)
    IF              reduce using rule 38 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 38 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 38 (expression -> expression MOD expression .)
    BITAND          reduce using rule 38 (expression -> expression MOD expression .)
    BITXOR          reduce using rule 38 (expression -> expression MOD expression .)
    BITOR           reduce using rule 38 (expression -> expression MOD expression .)
    MOD             reduce using rule 38 (expression -> expression MOD expression .)
    ADD             reduce using rule 38 (expression -> expression MOD expression .)
    SUB             reduce using rule 38 (expression -> expression MOD expression .)
    MUL             reduce using rule 38 (expression -> expression MOD expression .)
    DIV             reduce using rule 38 (expression -> expression MOD expression .)
    AND             reduce using rule 38 (expression -> expression MOD expression .)
    XOR             reduce using rule 38 (expression -> expression MOD expression .)
    NEQ             reduce using rule 38 (expression -> expression MOD expression .)
    GTE             reduce using rule 38 (expression -> expression MOD expression .)
    LTE             reduce using rule 38 (expression -> expression MOD expression .)
    EQ              reduce using rule 38 (expression -> expression MOD expression .)
    LT              reduce using rule 38 (expression -> expression MOD expression .)
    GT              reduce using rule 38 (expression -> expression MOD expression .)
    OR              reduce using rule 38 (expression -> expression MOD expression .)
    NEWLINE         reduce using rule 38 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 38 (expression -> expression MOD expression .)
    COMMA           reduce using rule 38 (expression -> expression MOD expression .)
    ELSE            reduce using rule 38 (expression -> expression MOD expression .)
    EXP             shift and go to state 57

  ! EXP             [ reduce using rule 38 (expression -> expression MOD expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 58 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 93

    (39) expression -> expression ADD expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 39 (expression -> expression ADD expression .)
    IF              reduce using rule 39 (expression -> expression ADD expression .)
    LSHIFT          reduce using rule 39 (expression -> expression ADD expression .)
    RSHIFT          reduce using rule 39 (expression -> expression ADD expression .)
    BITAND          reduce using rule 39 (expression -> expression ADD expression .)
    BITXOR          reduce using rule 39 (expression -> expression ADD expression .)
    BITOR           reduce using rule 39 (expression -> expression ADD expression .)
    ADD             reduce using rule 39 (expression -> expression ADD expression .)
    SUB             reduce using rule 39 (expression -> expression ADD expression .)
    AND             reduce using rule 39 (expression -> expression ADD expression .)
    XOR             reduce using rule 39 (expression -> expression ADD expression .)
    NEQ             reduce using rule 39 (expression -> expression ADD expression .)
    GTE             reduce using rule 39 (expression -> expression ADD expression .)
    LTE             reduce using rule 39 (expression -> expression ADD expression .)
    EQ              reduce using rule 39 (expression -> expression ADD expression .)
    LT              reduce using rule 39 (expression -> expression ADD expression .)
    GT              reduce using rule 39 (expression -> expression ADD expression .)
    OR              reduce using rule 39 (expression -> expression ADD expression .)
    NEWLINE         reduce using rule 39 (expression -> expression ADD expression .)
    RPAREN          reduce using rule 39 (expression -> expression ADD expression .)
    COMMA           reduce using rule 39 (expression -> expression ADD expression .)
    ELSE            reduce using rule 39 (expression -> expression ADD expression .)
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! EXP             [ reduce using rule 39 (expression -> expression ADD expression .) ]
  ! MOD             [ reduce using rule 39 (expression -> expression ADD expression .) ]
  ! MUL             [ reduce using rule 39 (expression -> expression ADD expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression ADD expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 94

    (40) expression -> expression SUB expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 40 (expression -> expression SUB expression .)
    IF              reduce using rule 40 (expression -> expression SUB expression .)
    LSHIFT          reduce using rule 40 (expression -> expression SUB expression .)
    RSHIFT          reduce using rule 40 (expression -> expression SUB expression .)
    BITAND          reduce using rule 40 (expression -> expression SUB expression .)
    BITXOR          reduce using rule 40 (expression -> expression SUB expression .)
    BITOR           reduce using rule 40 (expression -> expression SUB expression .)
    ADD             reduce using rule 40 (expression -> expression SUB expression .)
    SUB             reduce using rule 40 (expression -> expression SUB expression .)
    AND             reduce using rule 40 (expression -> expression SUB expression .)
    XOR             reduce using rule 40 (expression -> expression SUB expression .)
    NEQ             reduce using rule 40 (expression -> expression SUB expression .)
    GTE             reduce using rule 40 (expression -> expression SUB expression .)
    LTE             reduce using rule 40 (expression -> expression SUB expression .)
    EQ              reduce using rule 40 (expression -> expression SUB expression .)
    LT              reduce using rule 40 (expression -> expression SUB expression .)
    GT              reduce using rule 40 (expression -> expression SUB expression .)
    OR              reduce using rule 40 (expression -> expression SUB expression .)
    NEWLINE         reduce using rule 40 (expression -> expression SUB expression .)
    RPAREN          reduce using rule 40 (expression -> expression SUB expression .)
    COMMA           reduce using rule 40 (expression -> expression SUB expression .)
    ELSE            reduce using rule 40 (expression -> expression SUB expression .)
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! EXP             [ reduce using rule 40 (expression -> expression SUB expression .) ]
  ! MOD             [ reduce using rule 40 (expression -> expression SUB expression .) ]
  ! MUL             [ reduce using rule 40 (expression -> expression SUB expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression SUB expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 95

    (41) expression -> expression MUL expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 41 (expression -> expression MUL expression .)
    IF              reduce using rule 41 (expression -> expression MUL expression .)
    LSHIFT          reduce using rule 41 (expression -> expression MUL expression .)
    RSHIFT          reduce using rule 41 (expression -> expression MUL expression .)
    BITAND          reduce using rule 41 (expression -> expression MUL expression .)
    BITXOR          reduce using rule 41 (expression -> expression MUL expression .)
    BITOR           reduce using rule 41 (expression -> expression MUL expression .)
    MOD             reduce using rule 41 (expression -> expression MUL expression .)
    ADD             reduce using rule 41 (expression -> expression MUL expression .)
    SUB             reduce using rule 41 (expression -> expression MUL expression .)
    MUL             reduce using rule 41 (expression -> expression MUL expression .)
    DIV             reduce using rule 41 (expression -> expression MUL expression .)
    AND             reduce using rule 41 (expression -> expression MUL expression .)
    XOR             reduce using rule 41 (expression -> expression MUL expression .)
    NEQ             reduce using rule 41 (expression -> expression MUL expression .)
    GTE             reduce using rule 41 (expression -> expression MUL expression .)
    LTE             reduce using rule 41 (expression -> expression MUL expression .)
    EQ              reduce using rule 41 (expression -> expression MUL expression .)
    LT              reduce using rule 41 (expression -> expression MUL expression .)
    GT              reduce using rule 41 (expression -> expression MUL expression .)
    OR              reduce using rule 41 (expression -> expression MUL expression .)
    NEWLINE         reduce using rule 41 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 41 (expression -> expression MUL expression .)
    COMMA           reduce using rule 41 (expression -> expression MUL expression .)
    ELSE            reduce using rule 41 (expression -> expression MUL expression .)
    EXP             shift and go to state 57

  ! EXP             [ reduce using rule 41 (expression -> expression MUL expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 58 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 96

    (42) expression -> expression DIV expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 42 (expression -> expression DIV expression .)
    IF              reduce using rule 42 (expression -> expression DIV expression .)
    LSHIFT          reduce using rule 42 (expression -> expression DIV expression .)
    RSHIFT          reduce using rule 42 (expression -> expression DIV expression .)
    BITAND          reduce using rule 42 (expression -> expression DIV expression .)
    BITXOR          reduce using rule 42 (expression -> expression DIV expression .)
    BITOR           reduce using rule 42 (expression -> expression DIV expression .)
    MOD             reduce using rule 42 (expression -> expression DIV expression .)
    ADD             reduce using rule 42 (expression -> expression DIV expression .)
    SUB             reduce using rule 42 (expression -> expression DIV expression .)
    MUL             reduce using rule 42 (expression -> expression DIV expression .)
    DIV             reduce using rule 42 (expression -> expression DIV expression .)
    AND             reduce using rule 42 (expression -> expression DIV expression .)
    XOR             reduce using rule 42 (expression -> expression DIV expression .)
    NEQ             reduce using rule 42 (expression -> expression DIV expression .)
    GTE             reduce using rule 42 (expression -> expression DIV expression .)
    LTE             reduce using rule 42 (expression -> expression DIV expression .)
    EQ              reduce using rule 42 (expression -> expression DIV expression .)
    LT              reduce using rule 42 (expression -> expression DIV expression .)
    GT              reduce using rule 42 (expression -> expression DIV expression .)
    OR              reduce using rule 42 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 42 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 42 (expression -> expression DIV expression .)
    COMMA           reduce using rule 42 (expression -> expression DIV expression .)
    ELSE            reduce using rule 42 (expression -> expression DIV expression .)
    EXP             shift and go to state 57

  ! EXP             [ reduce using rule 42 (expression -> expression DIV expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! LSHIFT          [ shift and go to state 52 ]
  ! RSHIFT          [ shift and go to state 53 ]
  ! BITAND          [ shift and go to state 54 ]
  ! BITXOR          [ shift and go to state 55 ]
  ! BITOR           [ shift and go to state 56 ]
  ! MOD             [ shift and go to state 58 ]
  ! ADD             [ shift and go to state 59 ]
  ! SUB             [ shift and go to state 60 ]
  ! MUL             [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 97

    (43) expression -> expression AND expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 43 (expression -> expression AND expression .)
    IF              reduce using rule 43 (expression -> expression AND expression .)
    AND             reduce using rule 43 (expression -> expression AND expression .)
    XOR             reduce using rule 43 (expression -> expression AND expression .)
    OR              reduce using rule 43 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 43 (expression -> expression AND expression .)
    RPAREN          reduce using rule 43 (expression -> expression AND expression .)
    COMMA           reduce using rule 43 (expression -> expression AND expression .)
    ELSE            reduce using rule 43 (expression -> expression AND expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70

  ! LSHIFT          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! BITAND          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! BITXOR          [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! BITOR           [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! EXP             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! ADD             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! SUB             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! MUL             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GTE             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LTE             [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 43 (expression -> expression AND expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 71 ]


state 98

    (44) expression -> expression XOR expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
  ! shift/reduce conflict for BITXOR resolved as shift
  ! shift/reduce conflict for BITOR resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 44 (expression -> expression XOR expression .)
    NEWLINE         reduce using rule 44 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 44 (expression -> expression XOR expression .)
    COMMA           reduce using rule 44 (expression -> expression XOR expression .)
    ELSE            reduce using rule 44 (expression -> expression XOR expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71

  ! IF              [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! LSHIFT          [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! RSHIFT          [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! BITAND          [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! BITXOR          [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! BITOR           [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! EXP             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! ADD             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! SUB             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! MUL             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! NEQ             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! GTE             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! LTE             [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 44 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression XOR expression .) ]


state 99

    (45) expression -> expression NEQ expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 45 (expression -> expression NEQ expression .)
    IF              reduce using rule 45 (expression -> expression NEQ expression .)
    AND             reduce using rule 45 (expression -> expression NEQ expression .)
    XOR             reduce using rule 45 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 45 (expression -> expression NEQ expression .)
    GTE             reduce using rule 45 (expression -> expression NEQ expression .)
    LTE             reduce using rule 45 (expression -> expression NEQ expression .)
    EQ              reduce using rule 45 (expression -> expression NEQ expression .)
    LT              reduce using rule 45 (expression -> expression NEQ expression .)
    GT              reduce using rule 45 (expression -> expression NEQ expression .)
    OR              reduce using rule 45 (expression -> expression NEQ expression .)
    NEWLINE         reduce using rule 45 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 45 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 45 (expression -> expression NEQ expression .)
    ELSE            reduce using rule 45 (expression -> expression NEQ expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! RSHIFT          [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! BITAND          [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! BITXOR          [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! BITOR           [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! EXP             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! ADD             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! SUB             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! MUL             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression NEQ expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 100

    (46) expression -> expression GTE expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 46 (expression -> expression GTE expression .)
    IF              reduce using rule 46 (expression -> expression GTE expression .)
    AND             reduce using rule 46 (expression -> expression GTE expression .)
    XOR             reduce using rule 46 (expression -> expression GTE expression .)
    NEQ             reduce using rule 46 (expression -> expression GTE expression .)
    GTE             reduce using rule 46 (expression -> expression GTE expression .)
    LTE             reduce using rule 46 (expression -> expression GTE expression .)
    EQ              reduce using rule 46 (expression -> expression GTE expression .)
    LT              reduce using rule 46 (expression -> expression GTE expression .)
    GT              reduce using rule 46 (expression -> expression GTE expression .)
    OR              reduce using rule 46 (expression -> expression GTE expression .)
    NEWLINE         reduce using rule 46 (expression -> expression GTE expression .)
    RPAREN          reduce using rule 46 (expression -> expression GTE expression .)
    COMMA           reduce using rule 46 (expression -> expression GTE expression .)
    ELSE            reduce using rule 46 (expression -> expression GTE expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! BITAND          [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! BITXOR          [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! BITOR           [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! EXP             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! ADD             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! SUB             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! MUL             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> expression GTE expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 101

    (47) expression -> expression LTE expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 47 (expression -> expression LTE expression .)
    IF              reduce using rule 47 (expression -> expression LTE expression .)
    AND             reduce using rule 47 (expression -> expression LTE expression .)
    XOR             reduce using rule 47 (expression -> expression LTE expression .)
    NEQ             reduce using rule 47 (expression -> expression LTE expression .)
    GTE             reduce using rule 47 (expression -> expression LTE expression .)
    LTE             reduce using rule 47 (expression -> expression LTE expression .)
    EQ              reduce using rule 47 (expression -> expression LTE expression .)
    LT              reduce using rule 47 (expression -> expression LTE expression .)
    GT              reduce using rule 47 (expression -> expression LTE expression .)
    OR              reduce using rule 47 (expression -> expression LTE expression .)
    NEWLINE         reduce using rule 47 (expression -> expression LTE expression .)
    RPAREN          reduce using rule 47 (expression -> expression LTE expression .)
    COMMA           reduce using rule 47 (expression -> expression LTE expression .)
    ELSE            reduce using rule 47 (expression -> expression LTE expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! BITAND          [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! BITXOR          [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! BITOR           [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! EXP             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! ADD             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! SUB             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! MUL             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! DIV             [ reduce using rule 47 (expression -> expression LTE expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 102

    (48) expression -> expression EQ expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 48 (expression -> expression EQ expression .)
    IF              reduce using rule 48 (expression -> expression EQ expression .)
    AND             reduce using rule 48 (expression -> expression EQ expression .)
    XOR             reduce using rule 48 (expression -> expression EQ expression .)
    NEQ             reduce using rule 48 (expression -> expression EQ expression .)
    GTE             reduce using rule 48 (expression -> expression EQ expression .)
    LTE             reduce using rule 48 (expression -> expression EQ expression .)
    EQ              reduce using rule 48 (expression -> expression EQ expression .)
    LT              reduce using rule 48 (expression -> expression EQ expression .)
    GT              reduce using rule 48 (expression -> expression EQ expression .)
    OR              reduce using rule 48 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 48 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 48 (expression -> expression EQ expression .)
    COMMA           reduce using rule 48 (expression -> expression EQ expression .)
    ELSE            reduce using rule 48 (expression -> expression EQ expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! BITAND          [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! BITXOR          [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! BITOR           [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! EXP             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! ADD             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! SUB             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! MUL             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! DIV             [ reduce using rule 48 (expression -> expression EQ expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 103

    (49) expression -> expression LT expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 49 (expression -> expression LT expression .)
    IF              reduce using rule 49 (expression -> expression LT expression .)
    AND             reduce using rule 49 (expression -> expression LT expression .)
    XOR             reduce using rule 49 (expression -> expression LT expression .)
    NEQ             reduce using rule 49 (expression -> expression LT expression .)
    GTE             reduce using rule 49 (expression -> expression LT expression .)
    LTE             reduce using rule 49 (expression -> expression LT expression .)
    EQ              reduce using rule 49 (expression -> expression LT expression .)
    LT              reduce using rule 49 (expression -> expression LT expression .)
    GT              reduce using rule 49 (expression -> expression LT expression .)
    OR              reduce using rule 49 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 49 (expression -> expression LT expression .)
    RPAREN          reduce using rule 49 (expression -> expression LT expression .)
    COMMA           reduce using rule 49 (expression -> expression LT expression .)
    ELSE            reduce using rule 49 (expression -> expression LT expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! BITAND          [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! BITXOR          [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! BITOR           [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! EXP             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! ADD             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! SUB             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! MUL             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression LT expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 104

    (50) expression -> expression GT expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 50 (expression -> expression GT expression .)
    IF              reduce using rule 50 (expression -> expression GT expression .)
    AND             reduce using rule 50 (expression -> expression GT expression .)
    XOR             reduce using rule 50 (expression -> expression GT expression .)
    NEQ             reduce using rule 50 (expression -> expression GT expression .)
    GTE             reduce using rule 50 (expression -> expression GT expression .)
    LTE             reduce using rule 50 (expression -> expression GT expression .)
    EQ              reduce using rule 50 (expression -> expression GT expression .)
    LT              reduce using rule 50 (expression -> expression GT expression .)
    GT              reduce using rule 50 (expression -> expression GT expression .)
    OR              reduce using rule 50 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 50 (expression -> expression GT expression .)
    RPAREN          reduce using rule 50 (expression -> expression GT expression .)
    COMMA           reduce using rule 50 (expression -> expression GT expression .)
    ELSE            reduce using rule 50 (expression -> expression GT expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62

  ! LSHIFT          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! BITAND          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! BITXOR          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! BITOR           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! EXP             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! ADD             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! SUB             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MUL             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! AND             [ shift and go to state 63 ]
  ! XOR             [ shift and go to state 64 ]
  ! NEQ             [ shift and go to state 65 ]
  ! GTE             [ shift and go to state 66 ]
  ! LTE             [ shift and go to state 67 ]
  ! EQ              [ shift and go to state 68 ]
  ! LT              [ shift and go to state 69 ]
  ! GT              [ shift and go to state 70 ]
  ! OR              [ shift and go to state 71 ]


state 105

    (51) expression -> expression OR expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    THEN            reduce using rule 51 (expression -> expression OR expression .)
    IF              reduce using rule 51 (expression -> expression OR expression .)
    XOR             reduce using rule 51 (expression -> expression OR expression .)
    OR              reduce using rule 51 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 51 (expression -> expression OR expression .)
    RPAREN          reduce using rule 51 (expression -> expression OR expression .)
    COMMA           reduce using rule 51 (expression -> expression OR expression .)
    ELSE            reduce using rule 51 (expression -> expression OR expression .)
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70

  ! LSHIFT          [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! BITAND          [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! BITXOR          [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! BITOR           [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! EXP             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! ADD             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! SUB             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! MUL             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! GTE             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! LTE             [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression OR expression .) ]
  ! IF              [ shift and go to state 50 ]
  ! XOR             [ shift and go to state 64 ]
  ! OR              [ shift and go to state 71 ]


state 106

    (52) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    BITAND          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    BITXOR          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    BITOR           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    EXP             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    ADD             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    SUB             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    MUL             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 52 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 52 (expression -> LPAREN expression RPAREN .)


state 107

    (53) expression -> TYPE LPAREN expression . RPAREN
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    RPAREN          shift and go to state 117
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 108

    (14) return -> RETURN LPAREN arguments RPAREN .

    TYPE            reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    MUT             reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    NAME            reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    FUNCNAME        reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    FOR             reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    IF              reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    WAIT            reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    RETURN          reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    $end            reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    END             reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)
    ELSE            reduce using rule 14 (return -> RETURN LPAREN arguments RPAREN .)


state 109

    (20) call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .

    TYPE            reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    MUT             reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    NAME            reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    FUNCNAME        reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    FOR             reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    IF              reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    WAIT            reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    RETURN          reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    $end            reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    END             reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)
    ELSE            reduce using rule 20 (call -> FUNCNAME LPAREN arguments RPAREN NEWLINE .)


state 110

    (21) call -> FUNCNAME LPAREN arguments RPAREN WITH . timeout NEWLINE
    (30) timeout -> . TIMEOUT WAITTYPE expression

    TIMEOUT         shift and go to state 119

    timeout                        shift and go to state 118

state 111

    (26) arguments -> arguments COMMA expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    RPAREN          reduce using rule 26 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 26 (arguments -> arguments COMMA expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 112

    (27) arguments -> arguments COMMA wait .

    RPAREN          reduce using rule 27 (arguments -> arguments COMMA wait .)
    COMMA           reduce using rule 27 (arguments -> arguments COMMA wait .)


state 113

    (22) for -> FOR NAME IN LPAREN arguments . RPAREN LOOP statements END LOOP NEWLINE
    (26) arguments -> arguments . COMMA expression
    (27) arguments -> arguments . COMMA wait

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 82


state 114

    (31) expression -> expression IF expression ELSE . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 121

state 115

    (23) if -> IF expression THEN statements END . IF NEWLINE

    IF              shift and go to state 122


state 116

    (24) if -> IF expression THEN statements ELSE . statements END IF NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (2) empty -> .
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WAIT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    END             reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WAIT            [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 123
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 117

    (53) expression -> TYPE LPAREN expression RPAREN .

    THEN            reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    IF              reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    BITAND          reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    BITXOR          reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    BITOR           reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    EXP             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    MOD             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    ADD             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    SUB             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    MUL             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    DIV             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    AND             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    XOR             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    NEQ             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    GTE             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    LTE             reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    EQ              reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    LT              reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    GT              reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    OR              reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    COMMA           reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)
    ELSE            reduce using rule 53 (expression -> TYPE LPAREN expression RPAREN .)


state 118

    (21) call -> FUNCNAME LPAREN arguments RPAREN WITH timeout . NEWLINE

    NEWLINE         shift and go to state 124


state 119

    (30) timeout -> TIMEOUT . WAITTYPE expression

    WAITTYPE        shift and go to state 125


state 120

    (22) for -> FOR NAME IN LPAREN arguments RPAREN . LOOP statements END LOOP NEWLINE

    LOOP            shift and go to state 126


state 121

    (31) expression -> expression IF expression ELSE expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for BITAND resolved as shift
  ! shift/reduce conflict for BITXOR resolved as shift
  ! shift/reduce conflict for BITOR resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 31 (expression -> expression IF expression ELSE expression .)
    NEWLINE         reduce using rule 31 (expression -> expression IF expression ELSE expression .)
    RPAREN          reduce using rule 31 (expression -> expression IF expression ELSE expression .)
    COMMA           reduce using rule 31 (expression -> expression IF expression ELSE expression .)
    ELSE            reduce using rule 31 (expression -> expression IF expression ELSE expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71

  ! IF              [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! LSHIFT          [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! RSHIFT          [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! BITAND          [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! BITXOR          [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! BITOR           [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! EXP             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! ADD             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! SUB             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! MUL             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! XOR             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! NEQ             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! GTE             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! LTE             [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! EQ              [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! LT              [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! GT              [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression IF expression ELSE expression .) ]


state 122

    (23) if -> IF expression THEN statements END IF . NEWLINE

    NEWLINE         shift and go to state 127


state 123

    (24) if -> IF expression THEN statements ELSE statements . END IF NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

    END             shift and go to state 128
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 124

    (21) call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .

    TYPE            reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    MUT             reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    NAME            reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    FUNCNAME        reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    FOR             reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    IF              reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    WAIT            reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    RETURN          reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    $end            reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    END             reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)
    ELSE            reduce using rule 21 (call -> FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE .)


state 125

    (30) timeout -> TIMEOUT WAITTYPE . expression
    (31) expression -> . expression IF expression ELSE expression
    (32) expression -> . expression LSHIFT expression
    (33) expression -> . expression RSHIFT expression
    (34) expression -> . expression BITAND expression
    (35) expression -> . expression BITXOR expression
    (36) expression -> . expression BITOR expression
    (37) expression -> . expression EXP expression
    (38) expression -> . expression MOD expression
    (39) expression -> . expression ADD expression
    (40) expression -> . expression SUB expression
    (41) expression -> . expression MUL expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression AND expression
    (44) expression -> . expression XOR expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression GTE expression
    (47) expression -> . expression LTE expression
    (48) expression -> . expression EQ expression
    (49) expression -> . expression LT expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression OR expression
    (52) expression -> . LPAREN expression RPAREN
    (53) expression -> . TYPE LPAREN expression RPAREN
    (54) expression -> . SUB expression
    (55) expression -> . INV expression
    (56) expression -> . NOT expression
    (57) expression -> . TIMEOUT
    (58) expression -> . NAME
    (59) expression -> . INT
    (60) expression -> . FLOAT
    (61) expression -> . TRUE
    (62) expression -> . FALSE
    (63) expression -> . UINT

    LPAREN          shift and go to state 29
    TYPE            shift and go to state 30
    SUB             shift and go to state 28
    INV             shift and go to state 31
    NOT             shift and go to state 32
    TIMEOUT         shift and go to state 33
    NAME            shift and go to state 34
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38
    UINT            shift and go to state 39

    expression                     shift and go to state 129

state 126

    (22) for -> FOR NAME IN LPAREN arguments RPAREN LOOP . statements END LOOP NEWLINE
    (3) statements -> . statement
    (4) statements -> . statements statement
    (5) statements -> . empty
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (2) empty -> .
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for MUT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for FUNCNAME resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WAIT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    END             reduce using rule 2 (empty -> .)
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

  ! TYPE            [ reduce using rule 2 (empty -> .) ]
  ! MUT             [ reduce using rule 2 (empty -> .) ]
  ! NAME            [ reduce using rule 2 (empty -> .) ]
  ! FUNCNAME        [ reduce using rule 2 (empty -> .) ]
  ! FOR             [ reduce using rule 2 (empty -> .) ]
  ! IF              [ reduce using rule 2 (empty -> .) ]
  ! WAIT            [ reduce using rule 2 (empty -> .) ]
  ! RETURN          [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 130
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 127

    (23) if -> IF expression THEN statements END IF NEWLINE .

    TYPE            reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    MUT             reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    NAME            reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    FUNCNAME        reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    FOR             reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    IF              reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    WAIT            reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    RETURN          reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    $end            reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    END             reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)
    ELSE            reduce using rule 23 (if -> IF expression THEN statements END IF NEWLINE .)


state 128

    (24) if -> IF expression THEN statements ELSE statements END . IF NEWLINE

    IF              shift and go to state 131


state 129

    (30) timeout -> TIMEOUT WAITTYPE expression .
    (31) expression -> expression . IF expression ELSE expression
    (32) expression -> expression . LSHIFT expression
    (33) expression -> expression . RSHIFT expression
    (34) expression -> expression . BITAND expression
    (35) expression -> expression . BITXOR expression
    (36) expression -> expression . BITOR expression
    (37) expression -> expression . EXP expression
    (38) expression -> expression . MOD expression
    (39) expression -> expression . ADD expression
    (40) expression -> expression . SUB expression
    (41) expression -> expression . MUL expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . AND expression
    (44) expression -> expression . XOR expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . GTE expression
    (47) expression -> expression . LTE expression
    (48) expression -> expression . EQ expression
    (49) expression -> expression . LT expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . OR expression

    NEWLINE         reduce using rule 30 (timeout -> TIMEOUT WAITTYPE expression .)
    IF              shift and go to state 50
    LSHIFT          shift and go to state 52
    RSHIFT          shift and go to state 53
    BITAND          shift and go to state 54
    BITXOR          shift and go to state 55
    BITOR           shift and go to state 56
    EXP             shift and go to state 57
    MOD             shift and go to state 58
    ADD             shift and go to state 59
    SUB             shift and go to state 60
    MUL             shift and go to state 61
    DIV             shift and go to state 62
    AND             shift and go to state 63
    XOR             shift and go to state 64
    NEQ             shift and go to state 65
    GTE             shift and go to state 66
    LTE             shift and go to state 67
    EQ              shift and go to state 68
    LT              shift and go to state 69
    GT              shift and go to state 70
    OR              shift and go to state 71


state 130

    (22) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements . END LOOP NEWLINE
    (4) statements -> statements . statement
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . call
    (9) statement -> . for
    (10) statement -> . if
    (11) statement -> . wait NEWLINE
    (12) statement -> . return
    (15) declaration -> . TYPE assignment
    (16) declaration -> . MUT TYPE NAME NEWLINE
    (17) declaration -> . MUT TYPE assignment
    (18) assignment -> . NAME ASSIGN expression NEWLINE
    (19) assignment -> . NAME ASSIGN call
    (20) call -> . FUNCNAME LPAREN arguments RPAREN NEWLINE
    (21) call -> . FUNCNAME LPAREN arguments RPAREN WITH timeout NEWLINE
    (22) for -> . FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE
    (23) if -> . IF expression THEN statements END IF NEWLINE
    (24) if -> . IF expression THEN statements ELSE statements END IF NEWLINE
    (29) wait -> . WAIT WAITTYPE expression
    (13) return -> . RETURN
    (14) return -> . RETURN LPAREN arguments RPAREN

    END             shift and go to state 132
    TYPE            shift and go to state 12
    MUT             shift and go to state 13
    NAME            shift and go to state 14
    FUNCNAME        shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    WAIT            shift and go to state 18
    RETURN          shift and go to state 19

    statement                      shift and go to state 20
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    call                           shift and go to state 7
    for                            shift and go to state 8
    if                             shift and go to state 9
    wait                           shift and go to state 10
    return                         shift and go to state 11

state 131

    (24) if -> IF expression THEN statements ELSE statements END IF . NEWLINE

    NEWLINE         shift and go to state 133


state 132

    (22) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END . LOOP NEWLINE

    LOOP            shift and go to state 134


state 133

    (24) if -> IF expression THEN statements ELSE statements END IF NEWLINE .

    TYPE            reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    MUT             reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    NAME            reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    FUNCNAME        reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    FOR             reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    IF              reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    WAIT            reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    RETURN          reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    $end            reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    END             reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)
    ELSE            reduce using rule 24 (if -> IF expression THEN statements ELSE statements END IF NEWLINE .)


state 134

    (22) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP . NEWLINE

    NEWLINE         shift and go to state 135


state 135

    (22) for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .

    TYPE            reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    MUT             reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    NAME            reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    FUNCNAME        reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    FOR             reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    IF              reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    WAIT            reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    RETURN          reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    $end            reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    END             reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)
    ELSE            reduce using rule 22 (for -> FOR NAME IN LPAREN arguments RPAREN LOOP statements END LOOP NEWLINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for MUT in state 0 resolved as shift
WARNING: shift/reduce conflict for NAME in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for WAIT in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 51 resolved as shift
WARNING: shift/reduce conflict for MUT in state 51 resolved as shift
WARNING: shift/reduce conflict for NAME in state 51 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 51 resolved as shift
WARNING: shift/reduce conflict for FOR in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 51 resolved as shift
WARNING: shift/reduce conflict for WAIT in state 51 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 98 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 98 resolved as shift
WARNING: shift/reduce conflict for BITXOR in state 98 resolved as shift
WARNING: shift/reduce conflict for BITOR in state 98 resolved as shift
WARNING: shift/reduce conflict for EXP in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for ADD in state 98 resolved as shift
WARNING: shift/reduce conflict for SUB in state 98 resolved as shift
WARNING: shift/reduce conflict for MUL in state 98 resolved as shift
WARNING: shift/reduce conflict for DIV in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for XOR in state 98 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 116 resolved as shift
WARNING: shift/reduce conflict for MUT in state 116 resolved as shift
WARNING: shift/reduce conflict for NAME in state 116 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for WAIT in state 116 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 121 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 121 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 121 resolved as shift
WARNING: shift/reduce conflict for BITAND in state 121 resolved as shift
WARNING: shift/reduce conflict for BITXOR in state 121 resolved as shift
WARNING: shift/reduce conflict for BITOR in state 121 resolved as shift
WARNING: shift/reduce conflict for EXP in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for ADD in state 121 resolved as shift
WARNING: shift/reduce conflict for SUB in state 121 resolved as shift
WARNING: shift/reduce conflict for MUL in state 121 resolved as shift
WARNING: shift/reduce conflict for DIV in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for XOR in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for GTE in state 121 resolved as shift
WARNING: shift/reduce conflict for LTE in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 126 resolved as shift
WARNING: shift/reduce conflict for MUT in state 126 resolved as shift
WARNING: shift/reduce conflict for NAME in state 126 resolved as shift
WARNING: shift/reduce conflict for FUNCNAME in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for WAIT in state 126 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 126 resolved as shift
